/**
 * @fileoverview added by tsickle
 * Generated from: lib/ngx-extended-pdf-viewer.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy, HostListener, NgZone, TemplateRef, Inject, PLATFORM_ID, ViewChild, } from '@angular/core';
import { getVersionSuffix, pdfDefaultOptions } from './options/pdf-default-options';
import { VerbosityLevel } from './options/verbosity-level';
import { FindState } from './events/find-result';
import { isPlatformBrowser } from '@angular/common';
import { PdfDummyComponentsComponent } from './pdf-dummy-components/pdf-dummy-components.component';
import { ElementRef } from '@angular/core';
import { PdfSecondaryToolbarComponent } from './secondary-toolbar/pdf-secondary-toolbar/pdf-secondary-toolbar.component';
import { PDFNotificationService } from './pdf-notification-service';
import { PdfCursorTools } from './options/pdf-cursor-tools';
import { Location } from '@angular/common';
import { PinchOnMobileSupport } from './pinch-on-mobile-support';
import { PdfSidebarComponent } from './sidebar/pdf-sidebar/pdf-sidebar.component';
import { ScrollModeType } from './options/pdf-viewer';
/**
 * @record
 */
function ElementAndPosition() { }
if (false) {
    /** @type {?} */
    ElementAndPosition.prototype.element;
    /** @type {?} */
    ElementAndPosition.prototype.x;
    /** @type {?} */
    ElementAndPosition.prototype.y;
}
/**
 * @record
 */
export function FormDataType() { }
var NgxExtendedPdfViewerComponent = /** @class */ (function () {
    function NgxExtendedPdfViewerComponent(ngZone, platformId, notificationService, location, elementRef) {
        this.ngZone = ngZone;
        this.platformId = platformId;
        this.notificationService = notificationService;
        this.location = location;
        this.elementRef = elementRef;
        this.customFindbarButtons = undefined;
        this.formData = {};
        this.formDataChange = new EventEmitter();
        this.pageViewMode = 'multiple';
        this.progress = new EventEmitter();
        this.srcChange = new EventEmitter();
        this.scrollMode = undefined;
        this.scrollModeChange = new EventEmitter();
        this.authorization = undefined;
        this.httpHeaders = undefined;
        this.contextMenuAllowed = true;
        this.afterPrint = new EventEmitter();
        this.beforePrint = new EventEmitter();
        this.currentZoomFactor = new EventEmitter();
        this.enablePrint = true;
        /**
         * Number of milliseconds to wait between initializing the PDF viewer and loading the PDF file.
         * Most users can let this parameter safely at it's default value of zero.
         * Set this to 1000 or higher if you run into timing problems (typically caused by loading the locale files
         * after the PDF files, so they are not available when the PDF viewer is initialized).
         */
        this.delayFirstView = 0;
        /**
         * How many log messages should be printed?
         * Legal values: VerbosityLevel.INFOS (= 5), VerbosityLevel.WARNINGS (= 1), VerbosityLevel.ERRORS (= 0)
         */
        this.logLevel = VerbosityLevel.WARNINGS;
        this.enablePinchOnMobile = false;
        /**
         * Use the minified (minifiedJSLibraries="true", which is the default) or the user-readable pdf.js library (minifiedJSLibraries="false")
         */
        this.minifiedJSLibraries = true;
        this.primaryMenuVisible = true;
        /**
         * option to increase (or reduce) print resolution. Default is 150 (dpi). Sensible values
         * are 300, 600, and 1200. Note the increase memory consumption, which may even result in a browser crash.
         */
        this.printResolution = null;
        this.rotationChange = new EventEmitter();
        this.minHeight = undefined;
        this._height = '100%';
        /**
         * If this flag is true, this components adds a link to the locale assets. The pdf viewer
         * sees this link and uses it to load the locale files automatically.
         * @param useBrowserLocale boolean
         */
        this.useBrowserLocale = false;
        this.backgroundColor = '#e8e8eb';
        /**
         * Allows the user to define the name of the file after clicking "download"
         */
        this.filenameForDownload = 'document.pdf';
        /**
         * Allows the user to disable the keyboard bindings completely
         */
        this.ignoreKeyboard = false;
        /**
         * Allows the user to disable a list of key bindings.
         */
        this.ignoreKeys = [];
        /**
         * Allows the user to enable a list of key bindings explicitly. If this property is set, every other key binding is ignored.
         */
        this.acceptKeys = [];
        /**
         * Allows the user to put the viewer's svg images into an arbitrary folder
         */
        this.imageResourcesPath = './' + pdfDefaultOptions.assetsFolder + '/images/';
        /**
         * Allows the user to put their locale folder into an arbitrary folder
         */
        this.localeFolderPath = './' + pdfDefaultOptions.assetsFolder + '/locale';
        /**
         * Override the default locale. This must be the complete locale name, such as "es-ES". The string is allowed to be all lowercase.
         */
        this.language = undefined;
        /**
         * By default, listening to the URL is deactivated because often the anchor tag is used for the Angular router
         */
        this.listenToURL = false;
        /**
         * Navigate to a certain "named destination"
         */
        this.nameddest = undefined;
        /**
         * allows you to pass a password to read password-protected files
         */
        this.password = undefined;
        this._showSidebarButton = true;
        this.viewerPositionTop = '32px';
        /**
         * pdf.js can show signatures, but fails to verify them. So they are switched off by default.
         * Set "[showUnverifiedSignatures]"="true" to display e-signatures nonetheless.
         */
        this.showUnverifiedSignatures = false;
        this.sidebarVisible = undefined;
        this.sidebarVisibleChange = new EventEmitter();
        this.showFindButton = undefined;
        this.showPagingButtons = true;
        this.showZoomButtons = true;
        this.showPresentationModeButton = false;
        this.showOpenFileButton = true;
        this.showPrintButton = true;
        this.showDownloadButton = true;
        this.showBookmarkButton = true;
        this.theme = 'light';
        this.showToolbar = true;
        this.showSecondaryToolbarButton = true;
        /**
         * Set by the event (secondaryMenuIsEmpty)
         */
        this.hideKebabMenuForSecondaryToolbar = false;
        this.showRotateButton = true;
        this.handTool = true;
        this.handToolChange = new EventEmitter();
        this.showHandToolButton = false;
        this.showScrollingButton = true;
        this.showSpreadButton = true;
        this.showPropertiesButton = true;
        this.showBorders = true;
        this.spreadChange = new EventEmitter();
        this.thumbnailDrawn = new EventEmitter();
        this._page = undefined;
        this.pageChange = new EventEmitter();
        this.pageLabel = undefined;
        this.pageLabelChange = new EventEmitter();
        this.pagesLoaded = new EventEmitter();
        this.pageRendered = new EventEmitter();
        this.pdfDownloaded = new EventEmitter();
        this.pdfLoaded = new EventEmitter();
        this.pdfLoadingFailed = new EventEmitter();
        this.textLayer = undefined;
        this.textLayerRendered = new EventEmitter();
        this.updateFindMatchesCount = new EventEmitter();
        this.updateFindState = new EventEmitter();
        /**
         * Legal values: undefined, 'auto', 'page-actual', 'page_fit', 'page-width', or '50' (or any other percentage)
         */
        this.zoom = undefined;
        this.zoomChange = new EventEmitter();
        this.zoomLevels = ['auto', 'page-actual', 'page-fit', 'page-width', 0.5, 1, 1.25, 1.5, 2, 3, 4];
        this.maxZoom = 10;
        this.minZoom = 0.1;
        /**
         * This attribute allows you to increase the size of the UI elements so you can use them on small mobile devices.
         * This attribute is a string with a percent character at the end (e.g. "150%").
         */
        this._mobileFriendlyZoom = '100%';
        this.mobileFriendlyZoomScale = 1;
        this.toolbarPaddingTop = '0px';
        this.toolbarWidth = '100%';
        this.toolbarWidthInPixels = 100;
        this.secondaryToolbarTop = undefined;
        // dirty IE11 hack - temporary solution
        this.findbarTop = undefined;
        // dirty IE11 hack - temporary solution
        this.findbarLeft = undefined;
        // Additional PDF Form Field Types #567: Used to store the exported values of radio and checkbox buttons
        this.buttonValues = {};
        this.shuttingDown = false;
    }
    Object.defineProperty(NgxExtendedPdfViewerComponent.prototype, "src", {
        set: /**
         * @param {?} url
         * @return {?}
         */
        function (url) {
            var _this = this;
            if (url instanceof Uint8Array) {
                this._src = url.buffer;
            }
            else if (typeof Blob !== 'undefined' && url instanceof Blob) { // additional check introduced to support server side rendering
                // additional check introduced to support server side rendering
                /** @type {?} */
                var reader_1 = new FileReader();
                reader_1.onloadend = (/**
                 * @return {?}
                 */
                function () {
                    setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        _this.src = new Uint8Array((/** @type {?} */ (reader_1.result)));
                        if (NgxExtendedPdfViewerComponent.ngxExtendedPdfViewerInitialized) {
                            _this.openPDF2();
                            // else openPDF is called later, so we should load the PDF file twice
                        }
                    }));
                });
                reader_1.readAsArrayBuffer(url);
            }
            else if (typeof url === 'string') {
                this._src = url;
                if (url.length > 980) {
                    // minimal length of a base64 encoded PDF
                    if (url.length % 4 === 0) {
                        if (/^[a-zA-Z\d\/+]+={0,2}$/.test(url)) {
                            console.error('The URL looks like a base64 encoded string. If so, please use the attribute [base64Src] instead of [src]');
                        }
                    }
                }
            }
            else {
                ((/** @type {?} */ (this._src))) = url;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxExtendedPdfViewerComponent.prototype, "base64Src", {
        set: /**
         * @param {?} base64
         * @return {?}
         */
        function (base64) {
            /** @type {?} */
            var binary_string = window.atob(base64);
            /** @type {?} */
            var len = binary_string.length;
            /** @type {?} */
            var bytes = new Uint8Array(len);
            for (var i = 0; i < len; i++) {
                bytes[i] = binary_string.charCodeAt(i);
            }
            this.src = bytes.buffer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxExtendedPdfViewerComponent.prototype, "height", {
        get: /**
         * @return {?}
         */
        function () {
            return this._height;
        },
        set: /**
         * @param {?} h
         * @return {?}
         */
        function (h) {
            var _this = this;
            this.minHeight = undefined;
            if (h) {
                this._height = h;
            }
            else {
                this.height = '100%';
            }
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.checkHeight();
            }));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxExtendedPdfViewerComponent.prototype, "showSidebarButton", {
        get: /**
         * @return {?}
         */
        function () {
            return this._showSidebarButton;
        },
        set: /**
         * @param {?} show
         * @return {?}
         */
        function (show) {
            this._showSidebarButton = show;
            /** @type {?} */
            var isIE = /msie\s|trident\//i.test(window.navigator.userAgent);
            /** @type {?} */
            var factor = 1;
            if (isIE) {
                factor = Number((this._mobileFriendlyZoom || '100').replace('%', '')) / 100;
            }
            if (this._showSidebarButton) {
                this.findbarLeft = (68 * factor).toString() + 'px';
            }
            else {
                this.findbarLeft = '0px';
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxExtendedPdfViewerComponent.prototype, "page", {
        get: /**
         * @return {?}
         */
        function () {
            return this._page;
        },
        set: /**
         * @param {?} p
         * @return {?}
         */
        function (p) {
            if (p) {
                // silently cope with strings
                this._page = Number(p);
            }
            else {
                this._page = undefined;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxExtendedPdfViewerComponent.prototype, "mobileFriendlyZoom", {
        get: /**
         * @return {?}
         */
        function () {
            return this._mobileFriendlyZoom;
        },
        /**
         * This attributes allows you to increase the size of the UI elements so you can use them on small mobile devices.
         * This attribute is a string with a percent character at the end (e.g. "150%").
         */
        set: /**
         * This attributes allows you to increase the size of the UI elements so you can use them on small mobile devices.
         * This attribute is a string with a percent character at the end (e.g. "150%").
         * @param {?} zoom
         * @return {?}
         */
        function (zoom) {
            // tslint:disable-next-line:triple-equals - the type conversion is intended
            if (zoom == 'true') {
                zoom = '150%';
                // tslint:disable-next-line:triple-equals - the type conversion is intended
            }
            else if (zoom == 'false' || zoom === undefined || zoom === null) {
                zoom = '100%';
            }
            this._mobileFriendlyZoom = zoom;
            /** @type {?} */
            var factor = 1;
            if (!String(zoom).includes('%')) {
                zoom = 100 * Number(zoom) + '%';
            }
            factor = Number((zoom || '100').replace('%', '')) / 100;
            this.mobileFriendlyZoomScale = factor;
            this.toolbarWidth = (100 / factor).toString() + '%';
            this.toolbarPaddingTop = (factor - 1) * 8 + 'px';
            if (this.showSidebarButton) {
                this.findbarLeft = (68 * factor).toString() + 'px';
            }
            else {
                this.findbarLeft = '0px';
            }
            this.secondaryToolbarTop = (36 + 36 * (factor - 1)).toString() + 'px';
            this.findbarTop = (36 + 52 * (factor - 1)).toString() + 'px';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxExtendedPdfViewerComponent.prototype, "sidebarPositionTop", {
        get: /**
         * @return {?}
         */
        function () {
            if (!this.isPrimaryMenuVisible()) {
                return '0';
            }
            if (this.mobileFriendlyZoom) {
                if (this.mobileFriendlyZoom.endsWith('%')) {
                    /** @type {?} */
                    var zoom = Number(this.mobileFriendlyZoom.substring(0, this.mobileFriendlyZoom.length - 1));
                    return (2 + 0.29 * zoom).toString() + 'px';
                }
                if (this.mobileFriendlyZoom.endsWith('px')) {
                    return this.mobileFriendlyZoom;
                }
                return (16 + 0.16 * Number(this.mobileFriendlyZoom)).toString() + 'px';
            }
            return '32px';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NgxExtendedPdfViewerComponent.prototype.calcViewerPositionTop = /**
     * @return {?}
     */
    function () {
        if (!this.isPrimaryMenuVisible()) {
            this.viewerPositionTop = '0';
            return;
        }
        if (this.mobileFriendlyZoom) {
            if (this.mobileFriendlyZoom.endsWith('%')) {
                /** @type {?} */
                var zoom = Number(this.mobileFriendlyZoom.substring(0, this.mobileFriendlyZoom.length - 1));
                if (!this.isPrimaryMenuVisible()) {
                    this.viewerPositionTop = '0';
                }
                else {
                    this.viewerPositionTop = (1 + 0.32 * zoom).toString() + 'px';
                }
                return;
            }
            if (this.mobileFriendlyZoom.endsWith('px')) {
                this.viewerPositionTop = this.mobileFriendlyZoom;
                return;
            }
        }
        this.viewerPositionTop = '32px';
    };
    /**
     * @private
     * @return {?}
     */
    NgxExtendedPdfViewerComponent.prototype.iOSVersionRequiresES5 = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var match = navigator.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/);
        if (match !== undefined && match !== null) {
            return parseInt(match[1], 10) < 13;
        }
        return false;
    };
    /**
     * @private
     * @return {?}
     */
    NgxExtendedPdfViewerComponent.prototype.loadViewer = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (!window['pdfjs-dist/build/pdf']) {
            setTimeout((/**
             * @return {?}
             */
            function () { return _this.loadViewer(); }), 25);
        }
        else {
            /** @type {?} */
            var isIE = !!((/** @type {?} */ (window))).MSInputMethodContext && !!((/** @type {?} */ (document))).documentMode;
            /** @type {?} */
            var isEdge = /Edge\/\d./i.test(navigator.userAgent);
            /** @type {?} */
            var isIOs12OrBelow = this.iOSVersionRequiresES5();
            /** @type {?} */
            var needsES5 = typeof ReadableStream === 'undefined' || typeof Promise['allSettled'] === 'undefined';
            /** @type {?} */
            var suffix = this.minifiedJSLibraries ? '.min.js' : '.js';
            /** @type {?} */
            var script2 = document.createElement('script');
            /** @type {?} */
            var assets = pdfDefaultOptions.assetsFolder;
            /** @type {?} */
            var versionSuffix = getVersionSuffix(assets);
            if (needsES5) {
                console.log('Using the ES5 version of the PDF viewer.');
            }
            script2.src = this.location.normalize(isIE || isEdge || isIOs12OrBelow || needsES5 ? assets + '/viewer-' + versionSuffix + '-es5' + suffix : assets + '/viewer-' + versionSuffix + suffix);
            script2.type = 'text/javascript';
            script2.async = true;
            document.getElementsByTagName('head')[0].appendChild(script2);
        }
    };
    /**
     * @return {?}
     */
    NgxExtendedPdfViewerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (isPlatformBrowser(this.platformId)) {
            /** @type {?} */
            var link = document.createElement('link');
            link.href = this.localeFolderPath + '/locale.properties';
            link.setAttribute('origin', 'ngx-extended-pdf-viewer');
            link.rel = 'resource';
            link.type = 'application/l10n';
            /** @type {?} */
            var widget = this.elementRef.nativeElement;
            widget.appendChild(link);
            this.onResize();
            if (!window['pdfjs-dist/build/pdf']) {
                /** @type {?} */
                var isIE = !!((/** @type {?} */ (window))).MSInputMethodContext && !!((/** @type {?} */ (document))).documentMode;
                /** @type {?} */
                var isEdge = /Edge\/\d./i.test(navigator.userAgent);
                /** @type {?} */
                var needsES5 = typeof ReadableStream === 'undefined' || typeof Promise['allSettled'] === 'undefined';
                /** @type {?} */
                var isIOs12OrBelow = this.iOSVersionRequiresES5();
                /** @type {?} */
                var suffix = this.minifiedJSLibraries ? '.min.js' : '.js';
                if (this.minifiedJSLibraries) {
                    if (!pdfDefaultOptions.workerSrc().endsWith('.min.js')) {
                        /** @type {?} */
                        var src_1 = pdfDefaultOptions.workerSrc();
                        pdfDefaultOptions.workerSrc = (/**
                         * @return {?}
                         */
                        function () { return src_1.replace('.js', '.min.js'); });
                    }
                }
                /** @type {?} */
                var assets = pdfDefaultOptions.assetsFolder;
                /** @type {?} */
                var versionSuffix = getVersionSuffix(assets);
                /** @type {?} */
                var script = document.createElement('script');
                script.src = this.location.normalize(isIE || isEdge || isIOs12OrBelow || needsES5 ? assets + '/pdf-' + versionSuffix + '-es5' + suffix : assets + '/pdf-' + versionSuffix + suffix);
                script.type = 'text/javascript';
                script.async = true;
                document.getElementsByTagName('head')[0].appendChild(script);
            }
            if (!((/** @type {?} */ (window))).webViewerLoad) {
                this.loadViewer();
            }
        }
    };
    /**
     * @return {?}
     */
    NgxExtendedPdfViewerComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (typeof window !== 'undefined') {
            if (!this.shuttingDown) {
                // hurried users sometimes reload the PDF before it has finished initializing
                if (((/** @type {?} */ (window))).webViewerLoad) {
                    this.doInitPDFViewer();
                }
                else {
                    setTimeout((/**
                     * @return {?}
                     */
                    function () { return _this.ngAfterViewInit(); }), 50);
                }
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    NgxExtendedPdfViewerComponent.prototype.assignTabindexes = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.startTabindex) {
            /** @type {?} */
            var r = (/** @type {?} */ (this.root.nativeElement.cloneNode(true)));
            r.classList.add('offscreen');
            this.showElementsRecursively(r);
            document.body.appendChild(r);
            /** @type {?} */
            var elements = this.collectElementPositions(r, this.root.nativeElement, []);
            document.body.removeChild(r);
            /** @type {?} */
            var sorted = elements.sort((/**
             * @param {?} a
             * @param {?} b
             * @return {?}
             */
            function (a, b) {
                if (a.y - b.y > 15) {
                    return 1;
                }
                if (b.y - a.y > 15) {
                    return -1;
                }
                return a.x - b.x;
            }));
            for (var i = 0; i < sorted.length; i++) {
                sorted[i].element.tabIndex = this.startTabindex + i;
            }
        }
    };
    /**
     * @private
     * @param {?} root
     * @return {?}
     */
    NgxExtendedPdfViewerComponent.prototype.showElementsRecursively = /**
     * @private
     * @param {?} root
     * @return {?}
     */
    function (root) {
        root.classList.remove('hidden');
        root.classList.remove('invisible');
        root.classList.remove('hiddenXXLView');
        root.classList.remove('hiddenXLView');
        root.classList.remove('hiddenLargeView');
        root.classList.remove('hiddenMediumView');
        root.classList.remove('hiddenSmallView');
        root.classList.remove('hiddenTinyView');
        root.classList.remove('visibleXXLView');
        root.classList.remove('visibleXLView');
        root.classList.remove('visibleLargeView');
        root.classList.remove('visibleMediumView');
        root.classList.remove('visibleSmallView');
        root.classList.remove('visibleTinyView');
        if (root instanceof HTMLButtonElement || root instanceof HTMLAnchorElement || root instanceof HTMLInputElement || root instanceof HTMLSelectElement) {
            return;
        }
        else if (root.childElementCount > 0) {
            for (var i = 0; i < root.childElementCount; i++) {
                /** @type {?} */
                var c = root.children.item(i);
                if (c) {
                    this.showElementsRecursively(c);
                }
            }
        }
    };
    /**
     * @private
     * @param {?} copy
     * @param {?} original
     * @param {?} elements
     * @return {?}
     */
    NgxExtendedPdfViewerComponent.prototype.collectElementPositions = /**
     * @private
     * @param {?} copy
     * @param {?} original
     * @param {?} elements
     * @return {?}
     */
    function (copy, original, elements) {
        if (copy instanceof HTMLButtonElement || copy instanceof HTMLAnchorElement || copy instanceof HTMLInputElement || copy instanceof HTMLSelectElement) {
            /** @type {?} */
            var rect = copy.getBoundingClientRect();
            /** @type {?} */
            var elementAndPos = (/** @type {?} */ ({
                element: original,
                x: Math.round(rect.left),
                y: Math.round(rect.top),
            }));
            elements.push(elementAndPos);
        }
        else if (copy.childElementCount > 0) {
            for (var i = 0; i < copy.childElementCount; i++) {
                /** @type {?} */
                var c = copy.children.item(i);
                /** @type {?} */
                var o = original.children.item(i);
                if (c && o) {
                    elements = this.collectElementPositions(c, o, elements);
                }
            }
        }
        return elements;
    };
    /**
     * @private
     * @return {?}
     */
    NgxExtendedPdfViewerComponent.prototype.doInitPDFViewer = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (typeof window === 'undefined') {
            return;
        }
        /** @type {?} */
        var langLinks = document.querySelectorAll('link[type="application/l10n"]');
        /** @type {?} */
        var langCount = langLinks.length;
        if (langCount === 0) {
            /** @type {?} */
            var dict = document.querySelector('script[type="application/l10n"]');
            if (!dict) {
                if (!this.useBrowserLocale) {
                    console.error(
                    // tslint:disable-next-line:quotemark
                    "If you set the attribute 'useBrowserLocale' to false, you must provide the translations yourself in a script or link tag.");
                    console.error('The easiest way to do this is to add them to the index.html.');
                }
            }
            else if (this.useBrowserLocale) {
                console.error(
                // tslint:disable-next-line:quotemark
                "Please set the attribute 'useBrowserLocale' to false if you provide the translations yourself in a script or link tag.");
            }
        }
        else if (this.useBrowserLocale) {
            /** @type {?} */
            var o = langLinks[0].attributes['origin'];
            if (o && o.value !== 'ngx-extended-pdf-viewer') {
                console.error(
                // tslint:disable-next-line:quotemark
                "Please set the attribute 'useBrowserLocale' to false if you provide the translations yourself in a script or link tag.");
            }
        }
        /** @type {?} */
        var callback = (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            document.removeEventListener('localized', callback);
            _this.initTimeout = setTimeout((/**
             * @return {?}
             */
            function () {
                if (!_this.shuttingDown) {
                    // hurried users sometimes reload the PDF before it has finished initializing
                    _this.afterLibraryInit();
                    _this.openPDF();
                    _this.assignTabindexes();
                }
            }), _this.delayFirstView);
        });
        window.addEventListener('afterprint', (/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            _this.afterPrint.emit();
        }));
        window.addEventListener('beforeprint', (/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            _this.beforePrint.emit();
        }));
        document.addEventListener('localized', callback);
        if (NgxExtendedPdfViewerComponent.ngxExtendedPdfViewerInitialized) {
            // tslint:disable-next-line:quotemark
            console.error("You're trying to open two instances of the PDF viewer. Most likely, this will result in errors.");
        }
        /** @type {?} */
        var onLoaded = (/**
         * @return {?}
         */
        function () {
            _this.overrideDefaultSettings();
            document.removeEventListener('webviewerloaded', onLoaded);
            if (_this.enablePinchOnMobile) {
                _this.pinchOnMobileSupport = new PinchOnMobileSupport(_this.ngZone);
            }
        });
        document.addEventListener('webviewerloaded', onLoaded);
        this.activateTextlayerIfNecessary(null);
        setTimeout((/**
         * @return {?}
         */
        function () {
            if (!_this.shuttingDown) {
                // hurried users sometimes reload the PDF before it has finished initializing
                // This initializes the webviewer, the file may be passed in to it to initialize the viewer with a pdf directly
                _this.primaryMenuVisible = _this.showToolbar;
                /** @type {?} */
                var hideSecondaryMenu = _this.hideKebabMenuForSecondaryToolbar && !_this.showSecondaryToolbarButton;
                if (hideSecondaryMenu) {
                    if (!_this.isPrimaryMenuVisible()) {
                        _this.primaryMenuVisible = false;
                    }
                }
                _this.calcViewerPositionTop();
                _this.dummyComponents.addMissingStandardWidgets();
                ((/** @type {?} */ (window))).webViewerLoad();
                /** @type {?} */
                var PDFViewerApplication = ((/** @type {?} */ (window))).PDFViewerApplication;
                PDFViewerApplication.appConfig.defaultUrl = ''; // IE bugfix
                PDFViewerApplication.appConfig.filenameForDownload = _this.filenameForDownload;
                /** @type {?} */
                var PDFViewerApplicationOptions = ((/** @type {?} */ (window))).PDFViewerApplicationOptions;
                PDFViewerApplicationOptions.set('locale', _this.language);
                PDFViewerApplicationOptions.set('imageResourcesPath', _this.imageResourcesPath);
                PDFViewerApplicationOptions.set('minZoom', _this.minZoom);
                PDFViewerApplicationOptions.set('maxZoom', _this.maxZoom);
                PDFViewerApplicationOptions.set('pageViewMode', _this.pageViewMode);
                PDFViewerApplicationOptions.set('verbosity', _this.logLevel);
                PDFViewerApplicationOptions.set('initialZoom', _this.zoom);
                PDFViewerApplication.isViewerEmbedded = true;
                if (PDFViewerApplication.printKeyDownListener) {
                    window.addEventListener('keydown', PDFViewerApplication.printKeyDownListener, true);
                }
                /** @type {?} */
                var pc = document.getElementById('printContainer');
                if (pc) {
                    document.getElementsByTagName('body')[0].appendChild(pc);
                }
            }
        }), 0);
    };
    /** Notifies every widget that implements onLibraryInit() that the PDF viewer objects are available */
    /**
     * Notifies every widget that implements onLibraryInit() that the PDF viewer objects are available
     * @private
     * @return {?}
     */
    NgxExtendedPdfViewerComponent.prototype.afterLibraryInit = /**
     * Notifies every widget that implements onLibraryInit() that the PDF viewer objects are available
     * @private
     * @return {?}
     */
    function () {
        this.notificationService.onPDFJSInit.next();
    };
    /**
     * @return {?}
     */
    NgxExtendedPdfViewerComponent.prototype.checkHeight = /**
     * @return {?}
     */
    function () {
        if (typeof document !== 'undefined') {
            /** @type {?} */
            var container = document.getElementsByClassName('zoom')[0];
            if (container) {
                if (container.clientHeight === 0 && this._height.includes('%')) {
                    /** @type {?} */
                    var available = window.innerHeight;
                    /** @type {?} */
                    var rect = container.getBoundingClientRect();
                    /** @type {?} */
                    var top_1 = rect.top;
                    /** @type {?} */
                    var mh = available - top_1;
                    /** @type {?} */
                    var factor = Number(this._height.replace('%', ''));
                    mh = (mh * factor) / 100;
                    if (mh > 100) {
                        this.minHeight = mh + 'px';
                    }
                    else {
                        this.minHeight = '100px';
                    }
                }
            }
        }
    };
    /**
     * @param {?} newSpread
     * @return {?}
     */
    NgxExtendedPdfViewerComponent.prototype.onSpreadChange = /**
     * @param {?} newSpread
     * @return {?}
     */
    function (newSpread) {
        this.spreadChange.emit(newSpread);
    };
    /**
     * @private
     * @param {?} options
     * @return {?}
     */
    NgxExtendedPdfViewerComponent.prototype.activateTextlayerIfNecessary = /**
     * @private
     * @param {?} options
     * @return {?}
     */
    function (options) {
        var _this = this;
        if (this.textLayer === undefined) {
            if (!this.handTool) {
                if (options) {
                    options.set('textLayerMode', 1);
                }
                this.textLayer = true;
                if (this.showFindButton === undefined) {
                    this.showFindButton = true;
                    setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        // todo remove this hack:
                        /** @type {?} */
                        var viewFind = (/** @type {?} */ (document.getElementById('viewFind')));
                        if (viewFind) {
                            viewFind.classList.remove('invisible');
                        }
                        /** @type {?} */
                        var findbar = (/** @type {?} */ (document.getElementById('findbar')));
                        if (findbar) {
                            findbar.classList.remove('invisible');
                        }
                    }));
                }
            }
            else {
                if (options) {
                    options.set('textLayerMode', this.showHandToolButton ? 1 : 0);
                }
                if (!this.showHandToolButton) {
                    if (this.showFindButton || this.showFindButton === undefined) {
                        this.ngZone.run((/**
                         * @return {?}
                         */
                        function () {
                            _this.showFindButton = false;
                        }));
                        if (this.logLevel >= VerbosityLevel.WARNINGS) {
                            console.warn(
                            // tslint:disable-next-line:max-line-length
                            'Hiding the "find" button because the text layer of the PDF file is not rendered. Use [textLayer]="true" to enable the find button.');
                        }
                    }
                    if (this.showHandToolButton) {
                        if (this.logLevel >= VerbosityLevel.WARNINGS) {
                            console.warn(
                            // tslint:disable-next-line:max-line-length
                            'Hiding the "hand tool / selection mode" menu because the text layer of the PDF file is not rendered. Use [textLayer]="true" to enable the the menu items.');
                            this.showHandToolButton = false;
                        }
                    }
                }
            }
        }
        else {
            if (this.textLayer) {
                if (options) {
                    options.set('textLayerMode', 1);
                }
                this.textLayer = true;
                if (this.showFindButton === undefined) {
                    this.showFindButton = true;
                    setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        // todo remove this hack:
                        /** @type {?} */
                        var viewFind = (/** @type {?} */ (document.getElementById('viewFind')));
                        if (viewFind) {
                            viewFind.classList.remove('invisible');
                        }
                        /** @type {?} */
                        var findbar = (/** @type {?} */ (document.getElementById('findbar')));
                        if (findbar) {
                            findbar.classList.remove('invisible');
                        }
                    }));
                }
            }
            else {
                if (options) {
                    options.set('textLayerMode', 0);
                }
                this.textLayer = false;
                if (this.showFindButton) {
                    if (this.logLevel >= VerbosityLevel.WARNINGS) {
                        // tslint:disable-next-line:max-line-length
                        console.warn('Hiding the "find" button because the text layer of the PDF file is not rendered. Use [textLayer]="true" to enable the find button.');
                        this.ngZone.run((/**
                         * @return {?}
                         */
                        function () {
                            _this.showFindButton = false;
                        }));
                    }
                }
                if (this.showHandToolButton) {
                    if (this.logLevel >= VerbosityLevel.WARNINGS) {
                        console.warn(
                        // tslint:disable-next-line:max-line-length
                        'Hiding the "hand tool / selection mode" menu because the text layer of the PDF file is not rendered. Use [textLayer]="true" to enable the the menu items.');
                        this.showHandToolButton = false;
                    }
                }
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    NgxExtendedPdfViewerComponent.prototype.overrideDefaultSettings = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var options = (/** @type {?} */ (((/** @type {?} */ (window))).PDFViewerApplicationOptions));
        // tslint:disable-next-line:forin
        for (var key in pdfDefaultOptions) {
            options.set(key, pdfDefaultOptions[key]);
        }
        options.set('disablePreferences', true);
        this.setZoom();
        options.set('ignoreKeyboard', this.ignoreKeyboard);
        options.set('ignoreKeys', this.ignoreKeys);
        options.set('acceptKeys', this.acceptKeys);
        this.activateTextlayerIfNecessary(options);
        if (this.scrollMode || this.scrollMode === ScrollModeType.vertical) {
            options.set('scrollModeOnLoad', this.scrollMode);
        }
        /** @type {?} */
        var sidebarVisible = this.sidebarVisible;
        /** @type {?} */
        var PDFViewerApplication = ((/** @type {?} */ (window))).PDFViewerApplication;
        if (sidebarVisible !== undefined) {
            PDFViewerApplication.sidebarViewOnLoad = sidebarVisible ? 1 : 0;
            if (PDFViewerApplication.appConfig) {
                PDFViewerApplication.appConfig.sidebarViewOnLoad = sidebarVisible ? 1 : 0;
            }
            options.set('sidebarViewOnLoad', this.sidebarVisible ? 1 : 0);
        }
        if (this.spread === 'even') {
            options.set('spreadModeOnLoad', 2);
            if (PDFViewerApplication.pdfViewer) {
                PDFViewerApplication.pdfViewer.spreadMode = 2;
            }
            this.onSpreadChange('even');
        }
        else if (this.spread === 'odd') {
            options.set('spreadModeOnLoad', 1);
            if (PDFViewerApplication.pdfViewer) {
                PDFViewerApplication.pdfViewer.spreadMode = 1;
            }
            this.onSpreadChange('odd');
        }
        else {
            options.set('spreadModeOnLoad', 0);
            if (PDFViewerApplication.pdfViewer) {
                PDFViewerApplication.pdfViewer.spreadMode = 0;
            }
            this.onSpreadChange('off');
        }
        if (this.printResolution) {
            options.set('printResolution', this.printResolution);
        }
        if (this.showBorders === false) {
            options.set('removePageBorders', !this.showBorders);
        }
    };
    /**
     * @private
     * @return {?}
     */
    NgxExtendedPdfViewerComponent.prototype.openPDF = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        ServiceWorkerOptions.showUnverifiedSignatures = this.showUnverifiedSignatures;
        /** @type {?} */
        var PDFViewerApplication = ((/** @type {?} */ (window))).PDFViewerApplication;
        PDFViewerApplication.enablePrint = this.enablePrint;
        NgxExtendedPdfViewerComponent.ngxExtendedPdfViewerInitialized = true;
        this.onResize();
        if (!this.listenToURL) {
            PDFViewerApplication.pdfLinkService.setHash = (/**
             * @return {?}
             */
            function () { });
        }
        this.initTimeout = null;
        this.selectCursorTool();
        PDFViewerApplication.eventBus.on('textlayerrendered', (/**
         * @param {?} x
         * @return {?}
         */
        function (x) {
            _this.textLayerRendered.emit(x);
        }));
        PDFViewerApplication.eventBus.on('scrollmodechanged', (/**
         * @param {?} x
         * @return {?}
         */
        function (x) {
            _this.scrollModeChange.emit(x.mode);
        }));
        PDFViewerApplication.eventBus.on('progress', (/**
         * @param {?} x
         * @return {?}
         */
        function (x) {
            _this.progress.emit(x);
        }));
        PDFViewerApplication.eventBus.on('pagesloaded', (/**
         * @param {?} x
         * @return {?}
         */
        function (x) {
            _this.pagesLoaded.emit(x);
            _this.removeScrollbarInInititeScrollMode();
            if (_this.rotation) {
                /** @type {?} */
                var r = Number(_this.rotation);
                if (r === 0 || r === 90 || r === 180 || r === 270) {
                    PDFViewerApplication.pdfViewer.pagesRotation = r;
                }
            }
            else {
                PDFViewerApplication.pdfViewer.pagesRotation = 0;
            }
            setTimeout((/**
             * @return {?}
             */
            function () {
                if (!_this.shuttingDown) {
                    // hurried users sometimes reload the PDF before it has finished initializing
                    if (_this.nameddest) {
                        PDFViewerApplication.pdfLinkService.navigateTo(_this.nameddest);
                    }
                    else if (_this.page) {
                        PDFViewerApplication.page = Number(_this.page);
                    }
                    else if (_this.pageLabel) {
                        PDFViewerApplication.pdfViewer.currentPageLabel = _this.pageLabel;
                    }
                }
            }));
            _this.setZoom();
        }));
        PDFViewerApplication.eventBus.on('pagerendered', (/**
         * @param {?} x
         * @return {?}
         */
        function (x) {
            _this.ngZone.run((/**
             * @return {?}
             */
            function () {
                _this.pageRendered.emit(x);
                _this.fillFormFields(_this.formData);
                _this.addFormFieldListeners(_this.formData);
                _this.removeScrollbarInInititeScrollMode();
            }));
        }));
        PDFViewerApplication.eventBus.on('download', (/**
         * @param {?} x
         * @return {?}
         */
        function (x) {
            _this.ngZone.run((/**
             * @return {?}
             */
            function () {
                _this.pdfDownloaded.emit(x);
            }));
        }));
        PDFViewerApplication.eventBus.on('scalechanging', (/**
         * @param {?} x
         * @return {?}
         */
        function (x) {
            {
                /** @type {?} */
                var scale_1 = (/** @type {?} */ (((/** @type {?} */ (_this.root.nativeElement))).querySelector('#scaleSelect')));
                /** @type {?} */
                var userZoomFactor_1 = '';
                if (scale_1) {
                    userZoomFactor_1 = scale_1.value;
                }
            }
            _this.currentZoomFactor.emit(x.scale);
            /** @type {?} */
            var scale = (/** @type {?} */ (((/** @type {?} */ (_this.root.nativeElement))).querySelector('#scaleSelect')));
            /** @type {?} */
            var userZoomFactor = _this.zoom;
            if (scale) {
                userZoomFactor = scale.value;
            }
            if (userZoomFactor !== 'auto' && userZoomFactor !== 'page-fit' && userZoomFactor !== 'page-actual' && userZoomFactor !== 'page-width') {
                _this.zoom = x.scale * 100;
                _this.zoomChange.emit(x.scale * 100);
                // setTimeout(() => this.zoomChange.emit(x.scale * 100));
            }
            else if (_this.zoom !== userZoomFactor) {
                // called when the user selects one of the text values of the zoom select dropdown
                _this.zoomChange.emit(userZoomFactor);
            }
        }));
        PDFViewerApplication.eventBus.on('rotationchanging', (/**
         * @param {?} x
         * @return {?}
         */
        function (x) {
            _this.ngZone.run((/**
             * @return {?}
             */
            function () {
                _this.rotationChange.emit(x.pagesRotation);
            }));
        }));
        PDFViewerApplication.eventBus.on('fileinputchange', (/**
         * @param {?} x
         * @return {?}
         */
        function (x) {
            _this.ngZone.run((/**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var path = x.fileInput.value.replace('C:\\fakepath\\', '');
                _this.srcChange.emit(path);
            }));
        }));
        PDFViewerApplication.eventBus.on('cursortoolchanged', (/**
         * @param {?} x
         * @return {?}
         */
        function (x) {
            _this.ngZone.run((/**
             * @return {?}
             */
            function () {
                _this.handToolChange.emit(x.tool === PdfCursorTools.HAND);
            }));
        }));
        PDFViewerApplication.eventBus.on('sidebarviewchanged', (/**
         * @param {?} x
         * @return {?}
         */
        function (x) {
            _this.ngZone.run((/**
             * @return {?}
             */
            function () {
                _this.sidebarVisibleChange.emit(x.view > 0);
                if (_this.sidebarComponent) {
                    _this.sidebarComponent.showToolbarWhenNecessary();
                }
            }));
        }));
        PDFViewerApplication.eventBus.on('documentloaded', (/**
         * @param {?} pdfLoadedEvent
         * @return {?}
         */
        function (pdfLoadedEvent) {
            _this.ngZone.run((/**
             * @return {?}
             */
            function () {
                _this.loadComplete(pdfLoadedEvent.source.pdfDocument);
            }));
        }));
        /** @type {?} */
        var hideSidebarToolbar = (/**
         * @return {?}
         */
        function () {
            _this.ngZone.run((/**
             * @return {?}
             */
            function () {
                if (_this.sidebarComponent) {
                    _this.sidebarComponent.showToolbarWhenNecessary();
                }
            }));
        });
        PDFViewerApplication.eventBus.on('outlineloaded', hideSidebarToolbar);
        PDFViewerApplication.eventBus.on('attachmentsloaded', hideSidebarToolbar);
        PDFViewerApplication.eventBus.on('layersloaded', hideSidebarToolbar);
        PDFViewerApplication.eventBus.on('updatefindcontrolstate', (/**
         * @param {?} x
         * @return {?}
         */
        function (x) {
            if (_this.updateFindMatchesCount) {
                if (x.state === FindState.NOT_FOUND) {
                    _this.updateFindMatchesCount.emit({ current: 0, total: 0 });
                }
                else if (x.matchesCount.total) {
                    _this.updateFindMatchesCount.emit(x.matchesCount);
                }
            }
            if (_this.updateFindState) {
                _this.updateFindState.emit(x.state);
            }
        }));
        PDFViewerApplication.eventBus.on('updatefindmatchescount', (/**
         * @param {?} x
         * @return {?}
         */
        function (x) {
            if (_this.updateFindMatchesCount) {
                if (x.matchesCount.total) {
                    _this.updateFindMatchesCount.emit(x.matchesCount);
                }
            }
        }));
        PDFViewerApplication.eventBus.on('pagechanging', (/**
         * @param {?} x
         * @return {?}
         */
        function (x) {
            if (!_this.shuttingDown) {
                // hurried users sometimes reload the PDF before it has finished initializing
                _this.ngZone.run((/**
                 * @return {?}
                 */
                function () {
                    /** @type {?} */
                    var currentPage = PDFViewerApplication.pdfViewer.currentPageNumber;
                    /** @type {?} */
                    var currentPageLabel = PDFViewerApplication.pdfViewer.currentPageLabel;
                    if (currentPage !== _this.page) {
                        _this.pageChange.emit(currentPage);
                    }
                    if (currentPageLabel !== _this.pageLabel) {
                        _this.pageLabelChange.emit(currentPageLabel);
                    }
                }));
            }
        }));
        this.checkHeight();
        // open a file in the viewer
        if (!!this._src) {
            /** @type {?} */
            var options = {
                password: this.password,
                verbosity: this.logLevel,
            };
            if (this._src['range']) {
                options.range = this._src['range'];
            }
            if (this.httpHeaders) {
                options.httpHeaders = this.httpHeaders;
            }
            if (this.authorization) {
                options.withCredentials = true;
                if (options.httpHeaders) {
                    if (!options.httpHeaders.Authorization) {
                        options.httpHeaders.Authorization = this.authorization;
                    }
                }
                else {
                    options.httpHeaders = {
                        Authorization: this.authorization,
                    };
                }
            }
            PDFViewerApplication.onError = (/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return _this.pdfLoadingFailed.emit(error); });
            PDFViewerApplication.open(this._src, options).then((/**
             * @return {?}
             */
            function () {
                _this.pdfLoaded.emit({ pagesCount: PDFViewerApplication.pagesCount });
            }));
        }
        setTimeout((/**
         * @return {?}
         */
        function () {
            if (!_this.shuttingDown) {
                // hurried users sometimes reload the PDF before it has finished initializing
                if (_this.page) {
                    PDFViewerApplication.page = Number(_this.page);
                }
            }
        }), 100);
    };
    /**
     * @private
     * @return {?}
     */
    NgxExtendedPdfViewerComponent.prototype.removeScrollbarInInititeScrollMode = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.pageViewMode === 'infinite-scroll') {
            setTimeout((/**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var viewer = document.getElementById('viewer');
                if (viewer) {
                    /** @type {?} */
                    var height = viewer.clientHeight + 17;
                    /** @type {?} */
                    var zoom = document.getElementsByClassName('zoom')[0];
                    if (_this.primaryMenuVisible) {
                        _this.height = height + 35 + 'px';
                    }
                    else {
                        _this.height = height + 'px';
                    }
                    if (zoom) {
                        ((/** @type {?} */ (zoom))).style.height = _this.height;
                    }
                }
            }));
        }
    };
    /**
     * @return {?}
     */
    NgxExtendedPdfViewerComponent.prototype.openPDF2 = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.overrideDefaultSettings();
        /** @type {?} */
        var PDFViewerApplication = ((/** @type {?} */ (window))).PDFViewerApplication;
        /** @type {?} */
        var options = {
            password: this.password,
            verbosity: this.logLevel,
        };
        if (this._src['range']) {
            options.range = this._src['range'];
        }
        if (this.httpHeaders) {
            options.httpHeaders = this.httpHeaders;
        }
        if (this.authorization) {
            options.withCredentials = true;
            if (options.httpHeaders) {
                if (!options.httpHeaders.Authorization) {
                    options.httpHeaders.Authorization = this.authorization;
                }
            }
            else {
                options.httpHeaders = {
                    Authorization: this.authorization,
                };
            }
        }
        PDFViewerApplication.open(this._src, options).then((/**
         * @return {?}
         */
        function () {
            _this.pdfLoaded.emit({ pagesCount: PDFViewerApplication.pagesCount });
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) { return _this.pdfLoadingFailed.emit(error); }));
    };
    /**
     * @private
     * @return {?}
     */
    NgxExtendedPdfViewerComponent.prototype.selectCursorTool = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var PDFViewerApplication = ((/** @type {?} */ (window))).PDFViewerApplication;
        PDFViewerApplication.eventBus.dispatch('switchcursortool', { tool: this.handTool ? 1 : 0 });
    };
    /**
     * @return {?}
     */
    NgxExtendedPdfViewerComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (typeof window === 'undefined') {
            return; // fast escape for server side rendering
        }
        /** @type {?} */
        var PDFViewerApplication = ((/** @type {?} */ (window))).PDFViewerApplication;
        this.shuttingDown = true;
        NgxExtendedPdfViewerComponent.ngxExtendedPdfViewerInitialized = false;
        if (this.initTimeout) {
            clearTimeout(this.initTimeout);
            this.initTimeout = undefined;
        }
        if (PDFViewerApplication) {
            if (this.pinchOnMobileSupport) {
                this.pinchOnMobileSupport.destroyPinchZoom();
                this.pinchOnMobileSupport = undefined;
            }
            PDFViewerApplication.cleanup();
            PDFViewerApplication.close();
            if (PDFViewerApplication.printKeyDownListener) {
                removeEventListener('keydown', PDFViewerApplication.printKeyDownListener, true);
            }
            setTimeout((/**
             * @return {?}
             */
            function () {
                if (PDFViewerApplication._boundEvents) {
                    PDFViewerApplication.unbindWindowEvents();
                }
                /** @type {?} */
                var bus = PDFViewerApplication.eventBus;
                if (bus) {
                    PDFViewerApplication.unbindEvents();
                    for (var key in bus._listeners) {
                        if (bus._listeners[key]) {
                            /** @type {?} */
                            var list = bus._listeners[key];
                            // not sure if the for loop is necessary - but
                            // it might improve garbage collection if the "listeners"
                            // array is stored somewhere else
                            for (var i = 0; i < list.length; i++) {
                                list[i] = undefined;
                            }
                            bus._listeners[key] = undefined;
                        }
                    }
                }
                ((/** @type {?} */ (PDFViewerApplication.eventBus))) = null;
            }));
        }
        /** @type {?} */
        var body = document.getElementsByTagName('body');
        if (body[0]) {
            /** @type {?} */
            var topLevelElements = body[0].children;
            for (var i = topLevelElements.length - 1; i >= 0; i--) {
                /** @type {?} */
                var e = topLevelElements.item(i);
                if (e && e.id === 'printContainer') {
                    body[0].removeChild(e);
                }
                else if (e && e.id === 'fileInput') {
                    body[0].removeChild(e);
                }
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    NgxExtendedPdfViewerComponent.prototype.isPrimaryMenuVisible = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.showToolbar) {
            /** @type {?} */
            var visible = this.showBookmarkButton ||
                this.showDownloadButton ||
                this.showFindButton ||
                this.showOpenFileButton ||
                this.showPagingButtons ||
                this.showPresentationModeButton ||
                this.showPrintButton ||
                this.showPropertiesButton ||
                this.showRotateButton ||
                this.showHandToolButton ||
                this.showScrollingButton ||
                this.showSidebarButton ||
                this.showZoomButtons;
            if (visible) {
                return true;
            }
        }
        return false;
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    NgxExtendedPdfViewerComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (typeof window === 'undefined') {
            return; // server side rendering
        }
        /** @type {?} */
        var PDFViewerApplication = ((/** @type {?} */ (window))).PDFViewerApplication;
        /** @type {?} */
        var PDFViewerApplicationOptions = ((/** @type {?} */ (window))).PDFViewerApplicationOptions;
        if (NgxExtendedPdfViewerComponent.ngxExtendedPdfViewerInitialized) {
            if ('src' in changes || 'base64Src' in changes) {
                if (!!this._src) {
                    this.openPDF2();
                }
                else {
                    PDFViewerApplication.close();
                }
            }
            if ('zoom' in changes) {
                this.setZoom();
            }
            if ('maxZoom' in changes) {
                PDFViewerApplicationOptions.set('maxZoom', this.maxZoom);
            }
            if ('minZoom' in changes) {
                PDFViewerApplicationOptions.set('minZoom', this.minZoom);
            }
            if ('handTool' in changes) {
                this.selectCursorTool();
            }
            if ('page' in changes) {
                if (this.page) {
                    // tslint:disable-next-line: triple-equals
                    if (this.page != PDFViewerApplication.page) {
                        PDFViewerApplication.page = this.page;
                    }
                }
            }
            if ('pageLabel' in changes) {
                if (this.pageLabel) {
                    if (this.pageLabel !== PDFViewerApplication.pdfViewer.currentPageLabel) {
                        PDFViewerApplication.pdfViewer.currentPageLabel = this.pageLabel;
                    }
                }
            }
            if ('rotation' in changes) {
                if (this.rotation) {
                    /** @type {?} */
                    var r = Number(this.rotation);
                    if (r === 0 || r === 90 || r === 180 || r === 270) {
                        PDFViewerApplication.pdfViewer.pagesRotation = r;
                    }
                }
                else {
                    PDFViewerApplication.pdfViewer.pagesRotation = 0;
                }
            }
            if ('scrollMode' in changes) {
                if (this.scrollMode || this.scrollMode === ScrollModeType.vertical) {
                    PDFViewerApplication.pdfViewer.scrollMode = Number(this.scrollMode);
                }
            }
            if ('sidebarVisible' in changes) {
                if (this.sidebarVisible) {
                    PDFViewerApplication.pdfSidebar.open();
                }
                else {
                    PDFViewerApplication.pdfSidebar.close();
                }
            }
            if ('filenameForDownload' in changes) {
                PDFViewerApplication.appConfig.filenameForDownload = this.filenameForDownload;
            }
            if ('nameddest' in changes) {
                if (this.nameddest) {
                    PDFViewerApplication.pdfLinkService.navigateTo(this.nameddest);
                }
            }
            if ('spread' in changes) {
                if (this.spread === 'even') {
                    PDFViewerApplication.spreadModeOnLoad = 2;
                    PDFViewerApplication.pdfViewer.spreadMode = 2;
                    this.onSpreadChange('even');
                }
                else if (this.spread === 'odd') {
                    PDFViewerApplication.spreadModeOnLoad = 1;
                    PDFViewerApplication.pdfViewer.spreadMode = 1;
                    this.onSpreadChange('odd');
                }
                else {
                    PDFViewerApplication.spreadModeOnLoad = 0;
                    PDFViewerApplication.pdfViewer.spreadMode = 0;
                    this.onSpreadChange('off');
                }
            }
            if ('enablePinchOnMobile' in changes) {
                if (!changes['enablePinchOnMobile'].isFirstChange()) {
                    if (changes['enablePinchOnMobile'].currentValue !== changes['enablePinchOnMobile'].previousValue) {
                        if (this.enablePinchOnMobile) {
                            this.pinchOnMobileSupport = new PinchOnMobileSupport(this.ngZone);
                        }
                        else {
                            if (this.pinchOnMobileSupport) {
                                this.pinchOnMobileSupport.destroyPinchZoom();
                                this.pinchOnMobileSupport = undefined;
                            }
                        }
                    }
                }
            }
            this.primaryMenuVisible = this.showToolbar;
            if (!this.showSecondaryToolbarButton || this.hideKebabMenuForSecondaryToolbar) {
                if (!this.isPrimaryMenuVisible()) {
                    this.primaryMenuVisible = false;
                }
            }
            this.calcViewerPositionTop();
        } // end of if (NgxExtendedPdfViewerComponent.ngxExtendedPdfViewerInitialized)
        this.onResize();
        if ('printResolution' in changes) {
            /** @type {?} */
            var options = PDFViewerApplicationOptions;
            if (options) {
                options.set('printResolution', this.printResolution);
            }
        }
        if ('ignoreKeyboard' in changes) {
            /** @type {?} */
            var options = PDFViewerApplicationOptions;
            if (options) {
                this.overrideDefaultSettings();
            }
        }
        if ('ignoreKeys' in changes) {
            /** @type {?} */
            var options = PDFViewerApplicationOptions;
            if (options) {
                this.overrideDefaultSettings();
            }
        }
        if ('acceptKeys' in changes) {
            /** @type {?} */
            var options = PDFViewerApplicationOptions;
            if (options) {
                this.overrideDefaultSettings();
            }
        }
        if ('showBorders' in changes) {
            if (!changes['showBorders'].isFirstChange()) {
                /** @type {?} */
                var options = PDFViewerApplicationOptions;
                if (options) {
                    this.overrideDefaultSettings();
                    /** @type {?} */
                    var viewer = (/** @type {?} */ (document.getElementById('viewer')));
                    if (this.showBorders) {
                        viewer.classList.remove('removePageBorders');
                    }
                    else {
                        viewer.classList.add('removePageBorders');
                    }
                    if (PDFViewerApplication.pdfViewer) {
                        PDFViewerApplication.pdfViewer.removePageBorders = !this.showBorders;
                    }
                    /** @type {?} */
                    var zoomEvent = (/** @type {?} */ ({
                        source: viewer,
                        // tslint:disable-next-line:no-bitwise
                        scale: (Number(this.zoom) | 100) / 100,
                        presetValue: this.zoom,
                    }));
                    PDFViewerApplication.eventBus.dispatch('scalechanging', zoomEvent);
                }
            }
            if ('showUnverifiedSignatures' in changes) {
                if (PDFViewerApplication && PDFViewerApplication.pdfDocument) {
                    PDFViewerApplication.pdfDocument._transport.messageHandler.send('showUnverifiedSignatures', this.showUnverifiedSignatures);
                }
            }
            if ('formData' in changes) {
                /** @type {?} */
                var newFormData = this.addMissingFormFields(changes['formData'].currentValue);
                if (!this.equals(newFormData, changes['formData'].previousValue)) {
                    this.fillFormFields(this.formData);
                }
            }
        }
        if ('enablePrint' in changes) {
            if (!changes['enablePrint'].isFirstChange()) {
                PDFViewerApplication.enablePrint = this.enablePrint;
            }
        }
        if (('customFindbar' in changes && !changes['customFindbar'].isFirstChange()) ||
            ('customFindbarButtons' in changes && !changes['customFindbarButtons'].isFirstChange()) ||
            ('customFindbarInputArea' in changes && !changes['customFindbarInputArea'].isFirstChange()) ||
            ('customToolbar' in changes && !changes['customToolbar'].isFirstChange())) {
            if (this.dummyComponents) {
                this.dummyComponents.addMissingStandardWidgets();
            }
        }
        if ('height' in changes) {
        }
    };
    /**
     * @private
     * @param {?} object1
     * @param {?} object2
     * @return {?}
     */
    NgxExtendedPdfViewerComponent.prototype.equals = /**
     * @private
     * @param {?} object1
     * @param {?} object2
     * @return {?}
     */
    function (object1, object2) {
        var e_1, _a, e_2, _b;
        if (!object1 || !object2) {
            return object1 === object2;
        }
        /** @type {?} */
        var keys1 = Object.keys(object1);
        /** @type {?} */
        var keys2 = Object.keys(object2);
        try {
            for (var keys1_1 = tslib_1.__values(keys1), keys1_1_1 = keys1_1.next(); !keys1_1_1.done; keys1_1_1 = keys1_1.next()) {
                var key = keys1_1_1.value;
                if (object1.hasOwnProperty(key)) {
                    if (object1[key] !== undefined && object2[key] !== undefined) {
                        if (object1[key] !== object2[key]) {
                            return false;
                        }
                    }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (keys1_1_1 && !keys1_1_1.done && (_a = keys1_1.return)) _a.call(keys1_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        try {
            for (var keys2_1 = tslib_1.__values(keys2), keys2_1_1 = keys2_1.next(); !keys2_1_1.done; keys2_1_1 = keys2_1.next()) {
                var key = keys2_1_1.value;
                if (object2.hasOwnProperty(key)) {
                    if (object1[key] !== undefined && object2[key] !== undefined) {
                        if (object1[key] !== object2[key]) {
                            return false;
                        }
                    }
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (keys2_1_1 && !keys2_1_1.done && (_b = keys2_1.return)) _b.call(keys2_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return true;
    };
    /**
     * @private
     * @return {?}
     */
    NgxExtendedPdfViewerComponent.prototype.setZoom = /**
     * @private
     * @return {?}
     */
    function () {
        var e_3, _a;
        /** @type {?} */
        var zoomAsNumber = this.zoom;
        if (String(zoomAsNumber).endsWith('%')) {
            zoomAsNumber = Number(String(zoomAsNumber).replace('%', '')) / 100;
        }
        else if (!isNaN(Number(zoomAsNumber))) {
            zoomAsNumber = Number(zoomAsNumber) / 100;
        }
        if (!zoomAsNumber) {
            zoomAsNumber = 'auto';
        }
        /** @type {?} */
        var PDFViewerApplication = ((/** @type {?} */ (window))).PDFViewerApplication;
        if (PDFViewerApplication) {
            /** @type {?} */
            var PDFViewerApplicationOptions = ((/** @type {?} */ (window))).PDFViewerApplicationOptions;
            PDFViewerApplicationOptions.set('defaultZoomValue', zoomAsNumber);
        }
        /** @type {?} */
        var scale = (/** @type {?} */ (((/** @type {?} */ (this.root.nativeElement))).querySelector('#scaleSelect')));
        if (scale) {
            if (this.zoom === 'auto' || this.zoom === 'page-fit' || this.zoom === 'page-actual' || this.zoom === 'page-width') {
                scale.value = this.zoom;
            }
            else {
                scale.value = 'custom';
                try {
                    for (var _b = tslib_1.__values(((/** @type {?} */ (scale.options)))), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var option = _c.value;
                        if (option.value === 'custom') {
                            option.textContent = (Math.round(Number(zoomAsNumber) * 100000) / 1000) + "%";
                            continue;
                        }
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
            }
        }
        if (PDFViewerApplication.pdfViewer) {
            PDFViewerApplication.pdfViewer.currentScaleValue = zoomAsNumber;
        }
    };
    /**
     * @return {?}
     */
    NgxExtendedPdfViewerComponent.prototype.onResize = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var pdfViewer = document.getElementsByClassName('html');
        if (pdfViewer && pdfViewer.length > 0) {
            /** @type {?} */
            var container = document.getElementById('outerContainer');
            if (container) {
                /** @type {?} */
                var width = container.clientWidth;
                this.toolbarWidthInPixels = width;
                if (this.secondaryToolbarComponent) {
                    this.secondaryToolbarComponent.checkVisibility();
                }
            }
        }
        try {
            /** @type {?} */
            var observer = new ResizeObserver((/**
             * @return {?}
             */
            function () { return _this.removeScrollbarInInititeScrollMode(); }));
            /** @type {?} */
            var viewer = document.getElementById('viewer');
            if (viewer) {
                observer.observe(viewer);
            }
        }
        catch (exception) {
            console.log('ResizeObserver is not supported by your browser');
        }
    };
    /**
     * @return {?}
     */
    NgxExtendedPdfViewerComponent.prototype.onContextMenu = /**
     * @return {?}
     */
    function () {
        return this.contextMenuAllowed;
    };
    /**
     * @param {?} hideKebabButton
     * @return {?}
     */
    NgxExtendedPdfViewerComponent.prototype.onSecondaryMenuIsEmpty = /**
     * @param {?} hideKebabButton
     * @return {?}
     */
    function (hideKebabButton) {
        this.hideKebabMenuForSecondaryToolbar = hideKebabButton;
        if (hideKebabButton) {
            if (!this.isPrimaryMenuVisible()) {
                this.primaryMenuVisible = false;
            }
        }
    };
    /**
     * @param {?} formData
     * @return {?}
     */
    NgxExtendedPdfViewerComponent.prototype.fillFormFields = /**
     * @param {?} formData
     * @return {?}
     */
    function (formData) {
        /** @type {?} */
        var PDFViewerApplication = ((/** @type {?} */ (window))).PDFViewerApplication;
        if (!PDFViewerApplication || !PDFViewerApplication.pdfDocument || !PDFViewerApplication.pdfDocument.annotationStorage) {
            // ngOnChanges calls this method too early - so just ignore it
            return;
        }
        /** @type {?} */
        var annotations = PDFViewerApplication.pdfDocument.annotationStorage.getAll();
        for (var annotation in annotations) {
            if (annotation) {
                /** @type {?} */
                var container = document.querySelector('[data-annotation-id="' + annotation + '"]');
                if (container) {
                    /** @type {?} */
                    var field = container.querySelector('input');
                    if (field) {
                        /** @type {?} */
                        var fieldName = field.name;
                        /** @type {?} */
                        var newValue = formData[fieldName];
                        if (newValue === undefined) {
                            if (field.type === 'checkbox') {
                                // Additional PDF Form Field Types #567: use exportValue from the field annotation for the value
                                this.formData[fieldName] = field.checked ? this.buttonValues[annotation] : null;
                            }
                            else if (field.type === 'radio') {
                                // Additional PDF Form Field Types #567: use buttonValue from the field annotation for the value
                                if (field.checked)
                                    this.formData[fieldName] = this.buttonValues[annotation];
                            }
                            else {
                                this.formData[fieldName] = field.value;
                            }
                        }
                        if (newValue !== undefined) {
                            PDFViewerApplication.pdfDocument.annotationStorage.setValue(annotation, newValue);
                            if (field.type === 'checkbox') {
                                /** @type {?} */
                                var v = String(newValue) == this.buttonValues[annotation];
                                field.checked = v;
                            }
                            else if (field.type === 'radio') {
                                /** @type {?} */
                                var v = String(newValue) == this.buttonValues[annotation];
                                field.checked = v;
                            }
                            else {
                                field.value = (/** @type {?} */ (newValue));
                            }
                        }
                    }
                    // Additional PDF Form Field Types #567: handle multi line text fields
                    /** @type {?} */
                    var textarea = container.querySelector('textarea');
                    if (textarea) {
                        /** @type {?} */
                        var fieldName = textarea.name;
                        /** @type {?} */
                        var newValue = formData[fieldName];
                        if (newValue === undefined) {
                            this.formData[fieldName] = textarea.value;
                        }
                        if (newValue !== undefined) {
                            PDFViewerApplication.pdfDocument.annotationStorage.setValue(annotation, newValue);
                            textarea.value = (/** @type {?} */ (newValue));
                        }
                    }
                    /** @type {?} */
                    var select = container.querySelector('select');
                    if (select) {
                        /** @type {?} */
                        var fieldName = select.name;
                        /** @type {?} */
                        var newValue = formData[fieldName];
                        if (newValue === undefined) {
                            // Additional PDF Form Field Types #567: moved setting and retrieving <select> field values to functions to handle single or multi select fields
                            this.formData[fieldName] = this.getSelectValue(select);
                        }
                        if (newValue !== undefined) {
                            PDFViewerApplication.pdfDocument.annotationStorage.setValue(annotation, newValue);
                            // Additional PDF Form Field Types #567: moved setting and retrieving <select> field values to functions to handle single or multi select fields
                            this.setSelectValue(select, newValue);
                        }
                    }
                }
            }
        }
    };
    /**
     * @param {?} formData
     * @return {?}
     */
    NgxExtendedPdfViewerComponent.prototype.addFormFieldListeners = /**
     * @param {?} formData
     * @return {?}
     */
    function (formData) {
        var _this = this;
        /** @type {?} */
        var PDFViewerApplication = ((/** @type {?} */ (window))).PDFViewerApplication;
        /** @type {?} */
        var annotations = PDFViewerApplication.pdfDocument.annotationStorage.getAll();
        var _loop_1 = function (annotation) {
            if (annotation) {
                /** @type {?} */
                var container = document.querySelector('[data-annotation-id="' + annotation + '"]');
                if (container) {
                    /** @type {?} */
                    var field_1 = container.querySelector('input');
                    if (field_1) {
                        /** @type {?} */
                        var fieldName_1 = field_1.name;
                        /** @type {?} */
                        var newValue = formData[fieldName_1];
                        if (newValue === undefined) {
                            // Additional PDF Form Field Types #567: use exportValue/buttonValue from the field annotation for the value for checkboxes/radio buttons
                            if (field_1.type === 'checkbox' || field_1.type === 'radio') {
                                if (field_1.checked)
                                    this_1.formData[fieldName_1] = this_1.buttonValues[annotation];
                            }
                            else
                                this_1.formData[fieldName_1] = field_1.value;
                        }
                        field_1.addEventListener('input', (/**
                         * @return {?}
                         */
                        function () { return _this.emitFormDataChange(annotation, fieldName_1, field_1); }));
                    }
                    // Additional PDF Form Field Types #567: handle multi line text fields
                    /** @type {?} */
                    var textarea_1 = container.querySelector('textarea');
                    if (textarea_1) {
                        /** @type {?} */
                        var fieldName_2 = textarea_1.name;
                        /** @type {?} */
                        var newValue = formData[fieldName_2];
                        if (newValue === undefined) {
                            this_1.formData[fieldName_2] = textarea_1.value;
                        }
                        textarea_1.addEventListener('input', (/**
                         * @return {?}
                         */
                        function () { return _this.emitFormDataChange(annotation, fieldName_2, textarea_1); }));
                    }
                    /** @type {?} */
                    var select_1 = container.querySelector('select');
                    if (select_1) {
                        /** @type {?} */
                        var fieldName_3 = select_1.name;
                        /** @type {?} */
                        var newValue = formData[fieldName_3];
                        if (newValue === undefined) {
                            // Additional PDF Form Field Types #567: moved setting and retrieving <select> field values to functions to handle single or multi select fields
                            this_1.formData[fieldName_3] = this_1.getSelectValue(select_1);
                        }
                        select_1.addEventListener('input', (/**
                         * @return {?}
                         */
                        function () { return _this.emitFormDataChange(annotation, fieldName_3, select_1); }));
                    }
                }
            }
        };
        var this_1 = this;
        for (var annotation in annotations) {
            _loop_1(annotation);
        }
    };
    /**
     * @param {?} formData
     * @return {?}
     */
    NgxExtendedPdfViewerComponent.prototype.addMissingFormFields = /**
     * @param {?} formData
     * @return {?}
     */
    function (formData) {
        /** @type {?} */
        var result = tslib_1.__assign({}, formData);
        /** @type {?} */
        var PDFViewerApplication = ((/** @type {?} */ (window))).PDFViewerApplication;
        if (PDFViewerApplication && PDFViewerApplication.pdfDocument) {
            /** @type {?} */
            var annotations = PDFViewerApplication.pdfDocument.annotationStorage.getAll();
            for (var annotation in annotations) {
                if (annotation) {
                    /** @type {?} */
                    var container = document.querySelector('[data-annotation-id="' + annotation + '"]');
                    if (container) {
                        /** @type {?} */
                        var field = container.querySelector('input');
                        if (field) {
                            /** @type {?} */
                            var fieldName = field.name;
                            /** @type {?} */
                            var newValue = result[fieldName];
                            if (newValue === undefined) {
                                // Additional PDF Form Field Types #567: use exportValue/buttonValue from the field annotation for the value for checkboxes/radio buttons
                                if (field.type === 'checkbox') {
                                    result[fieldName] = field.checked ? this.buttonValues[annotation] : null;
                                }
                                else if (field.type === 'radio') {
                                    if (field.checked)
                                        result[fieldName] = this.buttonValues[annotation];
                                }
                                else {
                                    result[fieldName] = field.value;
                                }
                            }
                        }
                        /** @type {?} */
                        var select = container.querySelector('select');
                        if (select) {
                            /** @type {?} */
                            var fieldName = select.name;
                            /** @type {?} */
                            var newValue = result[fieldName];
                            if (newValue === undefined) {
                                // Additional PDF Form Field Types #567: moved setting and retrieving <select> field values to functions to handle single or multi select fields
                                result[fieldName] = this.getSelectValue(select);
                            }
                        }
                        // Additional PDF Form Field Types #567: handle multi line text fields
                        /** @type {?} */
                        var textarea = container.querySelector('textarea');
                        if (textarea) {
                            /** @type {?} */
                            var fieldName = textarea.name;
                            /** @type {?} */
                            var newValue = result[fieldName];
                            if (newValue === undefined) {
                                result[fieldName] = textarea.value;
                            }
                        }
                    }
                }
            }
        }
        return result;
    };
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    NgxExtendedPdfViewerComponent.prototype.getSelectValue = /**
     * @private
     * @param {?} field
     * @return {?}
     */
    function (field) {
        if (field.multiple) {
            /** @type {?} */
            var values = [];
            /** @type {?} */
            var options = field.options;
            for (var i = 0; i < options.length; i++) {
                if (options[i].selected) {
                    values.push(options[i].value);
                }
            }
            return values;
        }
        else
            return field.value;
    };
    /**
     * @private
     * @param {?} field
     * @param {?} value
     * @return {?}
     */
    NgxExtendedPdfViewerComponent.prototype.setSelectValue = /**
     * @private
     * @param {?} field
     * @param {?} value
     * @return {?}
     */
    function (field, value) {
        if (field.multiple && Array.isArray(value)) {
            /** @type {?} */
            var values = value;
            /** @type {?} */
            var options = field.options;
            for (var i = 0; i < options.length; i++)
                options[i].selected = values.indexOf(options[i].value) != -1;
        }
        else
            field.value = (/** @type {?} */ (value));
    };
    /**
     * @private
     * @param {?} annotation
     * @param {?} fieldName
     * @param {?} field
     * @return {?}
     */
    NgxExtendedPdfViewerComponent.prototype.emitFormDataChange = /**
     * @private
     * @param {?} annotation
     * @param {?} fieldName
     * @param {?} field
     * @return {?}
     */
    function (annotation, fieldName, field) {
        var _this = this;
        /** @type {?} */
        var value = null;
        if (field instanceof HTMLSelectElement) {
            value = this.getSelectValue(field);
        }
        // Additional PDF Form Field Types #567: handle multi line text fields
        else if (field instanceof HTMLTextAreaElement) {
            value = field.value;
        }
        else if (field instanceof HTMLInputElement) {
            // Additional PDF Form Field Types #567: use exportValue/buttonValue from the field annotation for the value for checkboxes/radio buttons
            if (field.type === 'checkbox') {
                if (field.checked)
                    value = this.buttonValues[annotation];
            }
            else if (field.type === 'radio') {
                if (field.checked)
                    value = this.buttonValues[annotation];
            }
            else {
                value = field.value;
            }
        }
        this.ngZone.run((/**
         * @return {?}
         */
        function () {
            if (_this.formData[fieldName] !== undefined) {
                _this.formData[fieldName] = value;
                _this.formDataChange.emit(_this.formData);
            }
        }));
    };
    /*
    private addInput(annotation: PDFAnnotationData, rect: number[]): void {
      // add input to page
      console.log(annotation);
    }
    */
    /*
      private addInput(annotation: PDFAnnotationData, rect: number[]): void {
        // add input to page
        console.log(annotation);
      }
      */
    /**
     * @param {?} pdf
     * @return {?}
     */
    NgxExtendedPdfViewerComponent.prototype.loadComplete = /*
      private addInput(annotation: PDFAnnotationData, rect: number[]): void {
        // add input to page
        console.log(annotation);
      }
      */
    /**
     * @param {?} pdf
     * @return {?}
     */
    function (pdf /* PDFDocumentProxy */) {
        var _this = this;
        // screen DPI / PDF DPI
        /**
         * This method has been inspired by https://medium.com/factory-mind/angular-pdf-forms-fa72b15c3fbd. Thanks, Jonny Fox!
         * @type {?}
         */
        var dpiRatio = 96 / 72;
        this.hasSignature = false;
        this.buttonValues = {};
        var _loop_2 = function (i) {
            // track the current page
            /** @type {?} */
            var currentPage = null;
            pdf
                .getPage(i)
                .then((/**
             * @param {?} p
             * @return {?}
             */
            function (p) {
                currentPage = p;
                // get the annotations of the current page
                return p.getAnnotations();
            }))
                .then((/**
             * @param {?} ann
             * @return {?}
             */
            function (ann) {
                // ugly cast due to missing typescript definitions
                // please contribute to complete @types/pdfjs-dist
                /** @type {?} */
                var annotations = ann;
                annotations
                    .filter((/**
                 * @param {?} a
                 * @return {?}
                 */
                function (a) { return a.subtype === 'Widget'; })) // get the form field annotation only
                    .forEach((/**
                 * @param {?} a
                 * @return {?}
                 */
                function (a) {
                    // Additional PDF Form Field Types #567: Store the exportValue for the check boxes and buttonValue for radio buttons for quick reference
                    if (a.checkBox)
                        _this.buttonValues[a.id] = a.exportValue;
                    else if (a.radioButton)
                        _this.buttonValues[a.id] = a.buttonValue;
                    if (a.fieldType === 'Sig') {
                        _this.ngZone.run((/**
                         * @return {?}
                         */
                        function () {
                            _this.hasSignature = true;
                            setTimeout((/**
                             * @return {?}
                             */
                            function () {
                                /** @type {?} */
                                var viewerContainer = (/** @type {?} */ (document.querySelector('#viewerContainer')));
                                viewerContainer.scrollBy(0, -32);
                            }));
                        }));
                    }
                    /*
                    // get the rectangle that represent the single field
                    // and resize it according to the current DPI
                    const fieldRect = currentPage.getViewport(dpiRatio).convertToViewportRectangle(a.rect);
      
                    // add the corresponding input
                    this.addInput(a, fieldRect);
                    */
                }));
            }));
        };
        for (var i = 1; i <= pdf.numPages; i++) {
            _loop_2(i);
        }
    };
    NgxExtendedPdfViewerComponent.ngxExtendedPdfViewerInitialized = false;
    NgxExtendedPdfViewerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-extended-pdf-viewer',
                    template: "<link *ngIf=\"useBrowserLocale\" rel=\"resource\" type=\"application/l10n\" [attr.xhref]=\"localeFolderPath+'/locale.properties'\" origin=\"ngx-extended-pdf-viewer\" />\n<pdf-dark-theme *ngIf=\"theme==='dark'\"></pdf-dark-theme>\n<pdf-light-theme *ngIf=\"theme==='light'\"></pdf-light-theme>\n\n<pdf-dynamic-css [zoom]=\"mobileFriendlyZoomScale\" [width]=\"toolbarWidthInPixels\"></pdf-dynamic-css>\n<div class=\"zoom\" [style.height]=\"height\" [style.minHeight]=\"minHeight\" #root>\n  <div class=\"html\">\n    <div class=\"loadingInProgress body\" [style.backgroundColor]=\"backgroundColor\">\n      <div id=\"outerContainer\" (window:resize)=\"onResize()\">\n        <div class=\"free-floating-bar\">\n          <ng-content *ngTemplateOutlet=\"customFreeFloatingBar ? customFreeFloatingBar : defaultFreeFloatingBar\"></ng-content>\n        </div>\n        <pdf-sidebar #pdfsidebar\n                     [sidebarPositionTop]=\"sidebarPositionTop\"\n                     [sidebarVisible]=\"sidebarVisible\"\n                     [showSidebarButton]=\"showSidebarButton\"\n                     [customSidebar]=\"customSidebar\"\n                     [customThumbnail]=\"customThumbnail\"\n                     (thumbnailDrawn)=\"thumbnailDrawn.emit($event)\">\n        </pdf-sidebar>\n        <div id=\"mainContainer\">\n          <pdf-dummy-components></pdf-dummy-components>\n\n          <pdf-toolbar\n            [customToolbar]=\"customToolbar\"\n            [mobileFriendlyZoomScale]=\"mobileFriendlyZoomScale\"\n            [primaryMenuVisible]=\"primaryMenuVisible\"\n            [showBookmarkButton]=\"showBookmarkButton\"\n            [showDownloadButton]=\"showDownloadButton\"\n            [showFindButton]=\"showFindButton\"\n            [showHandToolButton]=\"showHandToolButton\"\n            [showOpenFileButton]=\"showOpenFileButton\"\n            [showPrintButton]=\"showPrintButton && enablePrint\"\n            [showPagingButtons]=\"showPagingButtons\"\n            [showPresentationModeButton]=\"showPresentationModeButton\"\n            [showRotateButton]=\"showRotateButton\"\n            [showSecondaryToolbarButton]=\"showSecondaryToolbarButton && !hideKebabMenuForSecondaryToolbar\"\n            [showSidebarButton]=\"showSidebarButton\"\n            [showZoomButtons]=\"showZoomButtons\"\n            [textLayer]=\"textLayer\"\n            [toolbarPaddingTop]=\"toolbarPaddingTop\"\n            [toolbarWidth]=\"toolbarWidth\"\n            [zoomLevels]=\"zoomLevels\"\n          ></pdf-toolbar>\n\n          <pdf-secondary-toolbar #pdfSecondaryToolbarComponent\n            [customSecondaryToolbar]=\"customSecondaryToolbar\"\n            [secondaryToolbarTop]=\"secondaryToolbarTop\"\n            [mobileFriendlyZoomScale]=\"mobileFriendlyZoomScale\"\n            [showPresentationModeButton]=\"showPresentationModeButton\"\n            [showOpenFileButton]=\"showOpenFileButton\"\n            [showPrintButton]=\"showPrintButton && enablePrint\"\n            [showDownloadButton]=\"showDownloadButton\"\n            [showBookmarkButton]=\"showBookmarkButton\"\n            [showPagingButtons]=\"showPagingButtons\"\n            [showRotateButton]=\"showRotateButton\"\n            [showHandToolButton]=\"showHandToolButton\"\n            [showScrollingButton]=\"showScrollingButton\"\n            [showSpreadButton]=\"showSpreadButton\"\n            [showPropertiesButton]=\"showPropertiesButton\"\n            (spreadChange)=\"onSpreadChange($event)\"\n            (secondaryMenuIsEmpty)=\"onSecondaryMenuIsEmpty($event)\"\n          >\n          </pdf-secondary-toolbar>\n\n          <pdf-findbar\n            [findbarLeft]=\"findbarLeft\"\n            [findbarTop]=\"findbarTop\"\n            [mobileFriendlyZoomScale]=\"mobileFriendlyZoomScale\"\n            [showFindButton]=\"showFindButton\"\n            [customFindbarInputArea]=\"customFindbarInputArea\"\n            [customFindbarButtons]=\"customFindbarButtons\"\n          >\n          </pdf-findbar>\n\n          <pdf-context-menu></pdf-context-menu>\n\n          <div id=\"viewerContainer\" [style.top]=\"viewerPositionTop\">\n            <div class=\"unverified-signature-warning\" *ngIf=\"hasSignature\">\n              {{ 'unverified_signature_warning'\n                  | translate: \"This PDF file contains a digital signature. The PDF viewer can't verify if the signature is valid. Please download the file and open it in Acrobat Reader to verify the signature is valid.\"\n                  | async}}\n\n            </div>\n            <div id=\"viewer\" class=\"pdfViewer\" [style.backgroundColor]=\"backgroundColor\">\n            </div>\n          </div>\n\n          <div id=\"errorWrapper\" hidden=\"true\">\n            <div id=\"errorMessageLeft\">\n              <span id=\"errorMessage\"></span>\n              <button type=\"button\" id=\"errorShowMore\" data-l10n-id=\"error_more_info\">\n                More Information\n              </button>\n              <button type=\"button\" id=\"errorShowLess\" data-l10n-id=\"error_less_info\" hidden=\"true\">\n                Less Information\n              </button>\n            </div>\n            <div id=\"errorMessageRight\">\n              <button type=\"button\" id=\"errorClose\" data-l10n-id=\"error_close\">Close</button>\n            </div>\n            <div class=\"clearBoth\"></div>\n            <textarea id=\"errorMoreInfo\" hidden=\"true\" readonly=\"readonly\"></textarea>\n          </div>\n        </div>\n        <!-- mainContainer -->\n\n        <div id=\"overlayContainer\" class=\"hidden\">\n          <div id=\"passwordOverlay\" class=\"container hidden\">\n            <div class=\"dialog\">\n              <div class=\"row\">\n                <p id=\"passwordText\" data-l10n-id=\"password_label\">\n                  Enter the password to open this PDF file:\n                </p>\n              </div>\n              <div class=\"row\">\n                <input id=\"password\" class=\"toolbarField\" />\n              </div>\n              <div class=\"buttonRow\">\n                <button type=\"button\" id=\"passwordCancel\" class=\"overlayButton\">\n                  <span data-l10n-id=\"password_cancel\">Cancel</span>\n                </button>\n                <button type=\"button\" id=\"passwordSubmit\" class=\"overlayButton\">\n                  <span data-l10n-id=\"password_ok\">OK</span>\n                </button>\n              </div>\n            </div>\n          </div>\n          <pdf-document-properties-overlay class=\"container hidden\" id=\"documentPropertiesOverlay\"> </pdf-document-properties-overlay>\n\n          <div id=\"printServiceOverlay\" class=\"container hidden\">\n            <div class=\"dialog\">\n              <div class=\"row\">\n                <span data-l10n-id=\"print_progress_message\">Preparing document for printing\u2026</span>\n              </div>\n              <div class=\"row\">\n                <progress value=\"0\" max=\"100\"></progress>\n                <span data-l10n-id=\"print_progress_percent\" data-l10n-args='{ \"progress\": 0 }' class=\"relative-progress\">0%</span>\n              </div>\n              <div class=\"buttonRow\">\n                <button type=\"button\" id=\"printCancel\" class=\"overlayButton\">\n                  <span data-l10n-id=\"print_progress_close\">Cancel</span>\n                </button>\n              </div>\n            </div>\n          </div>\n         </div>\n        <!-- overlayContainer -->\n      </div>\n      <!-- outerContainer -->\n      <div id=\"printContainer\"></div>\n    </div>\n  </div>\n</div>\n\n<ng-template #defaultFreeFloatingBar>\n\n</ng-template>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    NgxExtendedPdfViewerComponent.ctorParameters = function () { return [
        { type: NgZone },
        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
        { type: PDFNotificationService },
        { type: Location },
        { type: ElementRef }
    ]; };
    NgxExtendedPdfViewerComponent.propDecorators = {
        dummyComponents: [{ type: ViewChild, args: [PdfDummyComponentsComponent,] }],
        root: [{ type: ViewChild, args: ['root',] }],
        customFindbarInputArea: [{ type: Input }],
        customToolbar: [{ type: Input }],
        customFindbar: [{ type: Input }],
        customFindbarButtons: [{ type: Input }],
        customSecondaryToolbar: [{ type: Input }],
        customSidebar: [{ type: Input }],
        customThumbnail: [{ type: Input }],
        customFreeFloatingBar: [{ type: Input }],
        formData: [{ type: Input }],
        formDataChange: [{ type: Output }],
        pageViewMode: [{ type: Input }],
        progress: [{ type: Output }],
        secondaryToolbarComponent: [{ type: ViewChild, args: ['pdfSecondaryToolbarComponent',] }],
        sidebarComponent: [{ type: ViewChild, args: ['pdfsidebar',] }],
        srcChange: [{ type: Output }],
        scrollMode: [{ type: Input }],
        scrollModeChange: [{ type: Output }],
        authorization: [{ type: Input }],
        httpHeaders: [{ type: Input }],
        contextMenuAllowed: [{ type: Input }],
        afterPrint: [{ type: Output }],
        beforePrint: [{ type: Output }],
        currentZoomFactor: [{ type: Output }],
        enablePrint: [{ type: Input }],
        delayFirstView: [{ type: Input }],
        logLevel: [{ type: Input }],
        enablePinchOnMobile: [{ type: Input }],
        minifiedJSLibraries: [{ type: Input }],
        printResolution: [{ type: Input }],
        rotation: [{ type: Input }],
        rotationChange: [{ type: Output }],
        src: [{ type: Input }],
        base64Src: [{ type: Input }],
        height: [{ type: Input }],
        useBrowserLocale: [{ type: Input }],
        backgroundColor: [{ type: Input }],
        filenameForDownload: [{ type: Input }],
        ignoreKeyboard: [{ type: Input }],
        ignoreKeys: [{ type: Input }],
        acceptKeys: [{ type: Input }],
        imageResourcesPath: [{ type: Input }],
        localeFolderPath: [{ type: Input }],
        language: [{ type: Input }],
        listenToURL: [{ type: Input }],
        nameddest: [{ type: Input }],
        password: [{ type: Input }],
        showUnverifiedSignatures: [{ type: Input }],
        startTabindex: [{ type: Input }],
        showSidebarButton: [{ type: Input }],
        sidebarVisible: [{ type: Input }],
        sidebarVisibleChange: [{ type: Output }],
        showFindButton: [{ type: Input }],
        showPagingButtons: [{ type: Input }],
        showZoomButtons: [{ type: Input }],
        showPresentationModeButton: [{ type: Input }],
        showOpenFileButton: [{ type: Input }],
        showPrintButton: [{ type: Input }],
        showDownloadButton: [{ type: Input }],
        showBookmarkButton: [{ type: Input }],
        theme: [{ type: Input }],
        showToolbar: [{ type: Input }],
        showSecondaryToolbarButton: [{ type: Input }],
        showRotateButton: [{ type: Input }],
        handTool: [{ type: Input }],
        handToolChange: [{ type: Output }],
        showHandToolButton: [{ type: Input }],
        showScrollingButton: [{ type: Input }],
        showSpreadButton: [{ type: Input }],
        showPropertiesButton: [{ type: Input }],
        showBorders: [{ type: Input }],
        spread: [{ type: Input }],
        spreadChange: [{ type: Output }],
        thumbnailDrawn: [{ type: Output }],
        page: [{ type: Input }],
        pageChange: [{ type: Output }],
        pageLabel: [{ type: Input }],
        pageLabelChange: [{ type: Output }],
        pagesLoaded: [{ type: Output }],
        pageRendered: [{ type: Output }],
        pdfDownloaded: [{ type: Output }],
        pdfLoaded: [{ type: Output }],
        pdfLoadingFailed: [{ type: Output }],
        textLayer: [{ type: Input }],
        textLayerRendered: [{ type: Output }],
        updateFindMatchesCount: [{ type: Output }],
        updateFindState: [{ type: Output }],
        zoom: [{ type: Input }],
        zoomChange: [{ type: Output }],
        zoomLevels: [{ type: Input }],
        maxZoom: [{ type: Input }],
        minZoom: [{ type: Input }],
        _mobileFriendlyZoom: [{ type: Input }],
        mobileFriendlyZoom: [{ type: Input }],
        onContextMenu: [{ type: HostListener, args: ['contextmenu',] }]
    };
    return NgxExtendedPdfViewerComponent;
}());
export { NgxExtendedPdfViewerComponent };
if (false) {
    /** @type {?} */
    NgxExtendedPdfViewerComponent.ngxExtendedPdfViewerInitialized;
    /**
     * The dummy components are inserted automatically when the user customizes the toolbar
     * without adding every original toolbar item. Without the dummy components, the
     * initialization code of pdf.js crashes because it assume that every standard widget is there.
     * @type {?}
     */
    NgxExtendedPdfViewerComponent.prototype.dummyComponents;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.root;
    /**
     * @type {?}
     * @private
     */
    NgxExtendedPdfViewerComponent.prototype.pinchOnMobileSupport;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.customFindbarInputArea;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.customToolbar;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.customFindbar;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.customFindbarButtons;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.customSecondaryToolbar;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.customSidebar;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.customThumbnail;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.customFreeFloatingBar;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.formData;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.formDataChange;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.pageViewMode;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.progress;
    /**
     * @type {?}
     * @private
     */
    NgxExtendedPdfViewerComponent.prototype.secondaryToolbarComponent;
    /**
     * @type {?}
     * @private
     */
    NgxExtendedPdfViewerComponent.prototype.sidebarComponent;
    /**
     * @type {?}
     * @private
     */
    NgxExtendedPdfViewerComponent.prototype._src;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.srcChange;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.scrollMode;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.scrollModeChange;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.authorization;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.httpHeaders;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.contextMenuAllowed;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.afterPrint;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.beforePrint;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.currentZoomFactor;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.enablePrint;
    /**
     * Number of milliseconds to wait between initializing the PDF viewer and loading the PDF file.
     * Most users can let this parameter safely at it's default value of zero.
     * Set this to 1000 or higher if you run into timing problems (typically caused by loading the locale files
     * after the PDF files, so they are not available when the PDF viewer is initialized).
     * @type {?}
     */
    NgxExtendedPdfViewerComponent.prototype.delayFirstView;
    /**
     * store the timeout id so it can be canceled if user leaves the page before the PDF is shown
     * @type {?}
     * @private
     */
    NgxExtendedPdfViewerComponent.prototype.initTimeout;
    /**
     * How many log messages should be printed?
     * Legal values: VerbosityLevel.INFOS (= 5), VerbosityLevel.WARNINGS (= 1), VerbosityLevel.ERRORS (= 0)
     * @type {?}
     */
    NgxExtendedPdfViewerComponent.prototype.logLevel;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.enablePinchOnMobile;
    /**
     * Use the minified (minifiedJSLibraries="true", which is the default) or the user-readable pdf.js library (minifiedJSLibraries="false")
     * @type {?}
     */
    NgxExtendedPdfViewerComponent.prototype.minifiedJSLibraries;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.primaryMenuVisible;
    /**
     * option to increase (or reduce) print resolution. Default is 150 (dpi). Sensible values
     * are 300, 600, and 1200. Note the increase memory consumption, which may even result in a browser crash.
     * @type {?}
     */
    NgxExtendedPdfViewerComponent.prototype.printResolution;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.rotation;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.rotationChange;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.hasSignature;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.minHeight;
    /**
     * @type {?}
     * @private
     */
    NgxExtendedPdfViewerComponent.prototype._height;
    /**
     * If this flag is true, this components adds a link to the locale assets. The pdf viewer
     * sees this link and uses it to load the locale files automatically.
     * \@param useBrowserLocale boolean
     * @type {?}
     */
    NgxExtendedPdfViewerComponent.prototype.useBrowserLocale;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.backgroundColor;
    /**
     * Allows the user to define the name of the file after clicking "download"
     * @type {?}
     */
    NgxExtendedPdfViewerComponent.prototype.filenameForDownload;
    /**
     * Allows the user to disable the keyboard bindings completely
     * @type {?}
     */
    NgxExtendedPdfViewerComponent.prototype.ignoreKeyboard;
    /**
     * Allows the user to disable a list of key bindings.
     * @type {?}
     */
    NgxExtendedPdfViewerComponent.prototype.ignoreKeys;
    /**
     * Allows the user to enable a list of key bindings explicitly. If this property is set, every other key binding is ignored.
     * @type {?}
     */
    NgxExtendedPdfViewerComponent.prototype.acceptKeys;
    /**
     * Allows the user to put the viewer's svg images into an arbitrary folder
     * @type {?}
     */
    NgxExtendedPdfViewerComponent.prototype.imageResourcesPath;
    /**
     * Allows the user to put their locale folder into an arbitrary folder
     * @type {?}
     */
    NgxExtendedPdfViewerComponent.prototype.localeFolderPath;
    /**
     * Override the default locale. This must be the complete locale name, such as "es-ES". The string is allowed to be all lowercase.
     * @type {?}
     */
    NgxExtendedPdfViewerComponent.prototype.language;
    /**
     * By default, listening to the URL is deactivated because often the anchor tag is used for the Angular router
     * @type {?}
     */
    NgxExtendedPdfViewerComponent.prototype.listenToURL;
    /**
     * Navigate to a certain "named destination"
     * @type {?}
     */
    NgxExtendedPdfViewerComponent.prototype.nameddest;
    /**
     * allows you to pass a password to read password-protected files
     * @type {?}
     */
    NgxExtendedPdfViewerComponent.prototype.password;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype._showSidebarButton;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.viewerPositionTop;
    /**
     * pdf.js can show signatures, but fails to verify them. So they are switched off by default.
     * Set "[showUnverifiedSignatures]"="true" to display e-signatures nonetheless.
     * @type {?}
     */
    NgxExtendedPdfViewerComponent.prototype.showUnverifiedSignatures;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.startTabindex;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.sidebarVisible;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.sidebarVisibleChange;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.showFindButton;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.showPagingButtons;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.showZoomButtons;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.showPresentationModeButton;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.showOpenFileButton;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.showPrintButton;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.showDownloadButton;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.showBookmarkButton;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.theme;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.showToolbar;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.showSecondaryToolbarButton;
    /**
     * Set by the event (secondaryMenuIsEmpty)
     * @type {?}
     */
    NgxExtendedPdfViewerComponent.prototype.hideKebabMenuForSecondaryToolbar;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.showRotateButton;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.handTool;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.handToolChange;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.showHandToolButton;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.showScrollingButton;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.showSpreadButton;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.showPropertiesButton;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.showBorders;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.spread;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.spreadChange;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.thumbnailDrawn;
    /**
     * @type {?}
     * @private
     */
    NgxExtendedPdfViewerComponent.prototype._page;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.pageChange;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.pageLabel;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.pageLabelChange;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.pagesLoaded;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.pageRendered;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.pdfDownloaded;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.pdfLoaded;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.pdfLoadingFailed;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.textLayer;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.textLayerRendered;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.updateFindMatchesCount;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.updateFindState;
    /**
     * Legal values: undefined, 'auto', 'page-actual', 'page_fit', 'page-width', or '50' (or any other percentage)
     * @type {?}
     */
    NgxExtendedPdfViewerComponent.prototype.zoom;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.zoomChange;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.zoomLevels;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.maxZoom;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.minZoom;
    /**
     * This attribute allows you to increase the size of the UI elements so you can use them on small mobile devices.
     * This attribute is a string with a percent character at the end (e.g. "150%").
     * @type {?}
     */
    NgxExtendedPdfViewerComponent.prototype._mobileFriendlyZoom;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.mobileFriendlyZoomScale;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.toolbarPaddingTop;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.toolbarWidth;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.toolbarWidthInPixels;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.secondaryToolbarTop;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.findbarTop;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.findbarLeft;
    /** @type {?} */
    NgxExtendedPdfViewerComponent.prototype.buttonValues;
    /**
     * @type {?}
     * @private
     */
    NgxExtendedPdfViewerComponent.prototype.shuttingDown;
    /**
     * @type {?}
     * @private
     */
    NgxExtendedPdfViewerComponent.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    NgxExtendedPdfViewerComponent.prototype.platformId;
    /**
     * @type {?}
     * @private
     */
    NgxExtendedPdfViewerComponent.prototype.notificationService;
    /**
     * @type {?}
     * @private
     */
    NgxExtendedPdfViewerComponent.prototype.location;
    /**
     * @type {?}
     * @private
     */
    NgxExtendedPdfViewerComponent.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,