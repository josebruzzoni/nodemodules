import { DoCheck, KeyValueDiffer, KeyValueDiffers, NgZone, OnDestroy, OnInit } from '@angular/core';
import { Control, Layer } from 'leaflet';
import { LeafletDirective } from '../../core/leaflet.directive';
/**
 * Baselayers directive
 *
 * This directive is provided as a convenient way to add baselayers to the map. The input accepts
 * a key-value map of layer name -> layer. Mutable changed are detected. On changes, a differ is
 * used to determine what changed so that layers are appropriately added or removed. This directive
 * will also add the layers control so users can switch between available base layers.
 *
 * To specify which layer to show as the 'active' baselayer, you will want to add it to the map
 * using the layers directive. Otherwise, the plugin will use the last one it sees.
 */
import * as ɵngcc0 from '@angular/core';
export declare class LeafletBaseLayersDirective implements DoCheck, OnDestroy, OnInit {
    private differs;
    private zone;
    baseLayersValue: {
        [name: string]: Layer;
    };
    baseLayersDiffer: KeyValueDiffer<string, Layer>;
    baseLayers: {
        [name: string]: Layer;
    };
    layersControlOptions: Control.LayersOptions;
    baseLayer: Layer;
    private leafletDirective;
    private controlLayers;
    constructor(leafletDirective: LeafletDirective, differs: KeyValueDiffers, zone: NgZone);
    ngOnDestroy(): void;
    ngOnInit(): void;
    ngDoCheck(): void;
    protected updateBaseLayers(): void;
    /**
     * Check the current base layer and change it to the new one if necessary
     */
    protected syncBaseLayer(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<LeafletBaseLayersDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<LeafletBaseLayersDirective, "[leafletBaseLayers]", never, { "baseLayers": "leafletBaseLayers"; "layersControlOptions": "leafletLayersControlOptions"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGVhZmxldC1iYXNlbGF5ZXJzLmRpcmVjdGl2ZS5kLnRzIiwic291cmNlcyI6WyJsZWFmbGV0LWJhc2VsYXllcnMuZGlyZWN0aXZlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERvQ2hlY2ssIEtleVZhbHVlRGlmZmVyLCBLZXlWYWx1ZURpZmZlcnMsIE5nWm9uZSwgT25EZXN0cm95LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbnRyb2wsIExheWVyIH0gZnJvbSAnbGVhZmxldCc7XG5pbXBvcnQgeyBMZWFmbGV0RGlyZWN0aXZlIH0gZnJvbSAnLi4vLi4vY29yZS9sZWFmbGV0LmRpcmVjdGl2ZSc7XG4vKipcbiAqIEJhc2VsYXllcnMgZGlyZWN0aXZlXG4gKlxuICogVGhpcyBkaXJlY3RpdmUgaXMgcHJvdmlkZWQgYXMgYSBjb252ZW5pZW50IHdheSB0byBhZGQgYmFzZWxheWVycyB0byB0aGUgbWFwLiBUaGUgaW5wdXQgYWNjZXB0c1xuICogYSBrZXktdmFsdWUgbWFwIG9mIGxheWVyIG5hbWUgLT4gbGF5ZXIuIE11dGFibGUgY2hhbmdlZCBhcmUgZGV0ZWN0ZWQuIE9uIGNoYW5nZXMsIGEgZGlmZmVyIGlzXG4gKiB1c2VkIHRvIGRldGVybWluZSB3aGF0IGNoYW5nZWQgc28gdGhhdCBsYXllcnMgYXJlIGFwcHJvcHJpYXRlbHkgYWRkZWQgb3IgcmVtb3ZlZC4gVGhpcyBkaXJlY3RpdmVcbiAqIHdpbGwgYWxzbyBhZGQgdGhlIGxheWVycyBjb250cm9sIHNvIHVzZXJzIGNhbiBzd2l0Y2ggYmV0d2VlbiBhdmFpbGFibGUgYmFzZSBsYXllcnMuXG4gKlxuICogVG8gc3BlY2lmeSB3aGljaCBsYXllciB0byBzaG93IGFzIHRoZSAnYWN0aXZlJyBiYXNlbGF5ZXIsIHlvdSB3aWxsIHdhbnQgdG8gYWRkIGl0IHRvIHRoZSBtYXBcbiAqIHVzaW5nIHRoZSBsYXllcnMgZGlyZWN0aXZlLiBPdGhlcndpc2UsIHRoZSBwbHVnaW4gd2lsbCB1c2UgdGhlIGxhc3Qgb25lIGl0IHNlZXMuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIExlYWZsZXRCYXNlTGF5ZXJzRGlyZWN0aXZlIGltcGxlbWVudHMgRG9DaGVjaywgT25EZXN0cm95LCBPbkluaXQge1xuICAgIHByaXZhdGUgZGlmZmVycztcbiAgICBwcml2YXRlIHpvbmU7XG4gICAgYmFzZUxheWVyc1ZhbHVlOiB7XG4gICAgICAgIFtuYW1lOiBzdHJpbmddOiBMYXllcjtcbiAgICB9O1xuICAgIGJhc2VMYXllcnNEaWZmZXI6IEtleVZhbHVlRGlmZmVyPHN0cmluZywgTGF5ZXI+O1xuICAgIGJhc2VMYXllcnM6IHtcbiAgICAgICAgW25hbWU6IHN0cmluZ106IExheWVyO1xuICAgIH07XG4gICAgbGF5ZXJzQ29udHJvbE9wdGlvbnM6IENvbnRyb2wuTGF5ZXJzT3B0aW9ucztcbiAgICBiYXNlTGF5ZXI6IExheWVyO1xuICAgIHByaXZhdGUgbGVhZmxldERpcmVjdGl2ZTtcbiAgICBwcml2YXRlIGNvbnRyb2xMYXllcnM7XG4gICAgY29uc3RydWN0b3IobGVhZmxldERpcmVjdGl2ZTogTGVhZmxldERpcmVjdGl2ZSwgZGlmZmVyczogS2V5VmFsdWVEaWZmZXJzLCB6b25lOiBOZ1pvbmUpO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ0RvQ2hlY2soKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgdXBkYXRlQmFzZUxheWVycygpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIENoZWNrIHRoZSBjdXJyZW50IGJhc2UgbGF5ZXIgYW5kIGNoYW5nZSBpdCB0byB0aGUgbmV3IG9uZSBpZiBuZWNlc3NhcnlcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgc3luY0Jhc2VMYXllcigpOiB2b2lkO1xufVxuIl19