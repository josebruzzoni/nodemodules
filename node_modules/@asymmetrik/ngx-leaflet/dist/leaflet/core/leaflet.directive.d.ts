import { ElementRef, EventEmitter, NgZone, OnChanges, OnInit, SimpleChange } from '@angular/core';
import { LatLng, LatLngBounds, Map, MapOptions } from 'leaflet';
import * as ɵngcc0 from '@angular/core';
export declare class LeafletDirective implements OnChanges, OnInit {
    private element;
    private zone;
    readonly DEFAULT_ZOOM: number;
    readonly DEFAULT_CENTER: LatLng;
    readonly DEFAULT_FPZ_OPTIONS: {};
    resizeTimer: any;
    map: Map;
    fitBoundsOptions: {};
    panOptions: {};
    zoomOptions: {};
    zoomPanOptions: {};
    options: MapOptions;
    mapReady: EventEmitter<Map>;
    zoom: number;
    center: LatLng;
    fitBounds: LatLngBounds;
    constructor(element: ElementRef, zone: NgZone);
    ngOnInit(): void;
    ngOnChanges(changes: {
        [key: string]: SimpleChange;
    }): void;
    getMap(): Map;
    onResize(): void;
    /**
     * Resize the map to fit it's parent container
     */
    private doResize();
    /**
     * Manage a delayed resize of the component
     */
    private delayResize();
    /**
     * Set the view (center/zoom) all at once
     * @param center The new center
     * @param zoom The new zoom level
     */
    private setView(center, zoom);
    /**
     * Set the map zoom level
     * @param zoom the new zoom level for the map
     */
    private setZoom(zoom);
    /**
     * Set the center of the map
     * @param center the center point
     */
    private setCenter(center);
    /**
     * Fit the map to the bounds
     * @param center the center point
     */
    private setFitBounds(latLngBounds);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<LeafletDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<LeafletDirective, "[leaflet]", never, { "fitBoundsOptions": "leafletFitBoundsOptions"; "panOptions": "leafletPanOptions"; "zoomOptions": "leafletZoomOptions"; "zoomPanOptions": "leafletZoomPanOptions"; "options": "leafletOptions"; "zoom": "leafletZoom"; "center": "leafletCenter"; "fitBounds": "leafletFitBounds"; }, { "mapReady": "leafletMapReady"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGVhZmxldC5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsibGVhZmxldC5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBOZ1pvbmUsIE9uQ2hhbmdlcywgT25Jbml0LCBTaW1wbGVDaGFuZ2UgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IExhdExuZywgTGF0TG5nQm91bmRzLCBNYXAsIE1hcE9wdGlvbnMgfSBmcm9tICdsZWFmbGV0JztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIExlYWZsZXREaXJlY3RpdmUgaW1wbGVtZW50cyBPbkNoYW5nZXMsIE9uSW5pdCB7XG4gICAgcHJpdmF0ZSBlbGVtZW50O1xuICAgIHByaXZhdGUgem9uZTtcbiAgICByZWFkb25seSBERUZBVUxUX1pPT006IG51bWJlcjtcbiAgICByZWFkb25seSBERUZBVUxUX0NFTlRFUjogTGF0TG5nO1xuICAgIHJlYWRvbmx5IERFRkFVTFRfRlBaX09QVElPTlM6IHt9O1xuICAgIHJlc2l6ZVRpbWVyOiBhbnk7XG4gICAgbWFwOiBNYXA7XG4gICAgZml0Qm91bmRzT3B0aW9uczoge307XG4gICAgcGFuT3B0aW9uczoge307XG4gICAgem9vbU9wdGlvbnM6IHt9O1xuICAgIHpvb21QYW5PcHRpb25zOiB7fTtcbiAgICBvcHRpb25zOiBNYXBPcHRpb25zO1xuICAgIG1hcFJlYWR5OiBFdmVudEVtaXR0ZXI8TWFwPjtcbiAgICB6b29tOiBudW1iZXI7XG4gICAgY2VudGVyOiBMYXRMbmc7XG4gICAgZml0Qm91bmRzOiBMYXRMbmdCb3VuZHM7XG4gICAgY29uc3RydWN0b3IoZWxlbWVudDogRWxlbWVudFJlZiwgem9uZTogTmdab25lKTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IHtcbiAgICAgICAgW2tleTogc3RyaW5nXTogU2ltcGxlQ2hhbmdlO1xuICAgIH0pOiB2b2lkO1xuICAgIGdldE1hcCgpOiBNYXA7XG4gICAgb25SZXNpemUoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBSZXNpemUgdGhlIG1hcCB0byBmaXQgaXQncyBwYXJlbnQgY29udGFpbmVyXG4gICAgICovXG4gICAgcHJpdmF0ZSBkb1Jlc2l6ZSgpO1xuICAgIC8qKlxuICAgICAqIE1hbmFnZSBhIGRlbGF5ZWQgcmVzaXplIG9mIHRoZSBjb21wb25lbnRcbiAgICAgKi9cbiAgICBwcml2YXRlIGRlbGF5UmVzaXplKCk7XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSB2aWV3IChjZW50ZXIvem9vbSkgYWxsIGF0IG9uY2VcbiAgICAgKiBAcGFyYW0gY2VudGVyIFRoZSBuZXcgY2VudGVyXG4gICAgICogQHBhcmFtIHpvb20gVGhlIG5ldyB6b29tIGxldmVsXG4gICAgICovXG4gICAgcHJpdmF0ZSBzZXRWaWV3KGNlbnRlciwgem9vbSk7XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBtYXAgem9vbSBsZXZlbFxuICAgICAqIEBwYXJhbSB6b29tIHRoZSBuZXcgem9vbSBsZXZlbCBmb3IgdGhlIG1hcFxuICAgICAqL1xuICAgIHByaXZhdGUgc2V0Wm9vbSh6b29tKTtcbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGNlbnRlciBvZiB0aGUgbWFwXG4gICAgICogQHBhcmFtIGNlbnRlciB0aGUgY2VudGVyIHBvaW50XG4gICAgICovXG4gICAgcHJpdmF0ZSBzZXRDZW50ZXIoY2VudGVyKTtcbiAgICAvKipcbiAgICAgKiBGaXQgdGhlIG1hcCB0byB0aGUgYm91bmRzXG4gICAgICogQHBhcmFtIGNlbnRlciB0aGUgY2VudGVyIHBvaW50XG4gICAgICovXG4gICAgcHJpdmF0ZSBzZXRGaXRCb3VuZHMobGF0TG5nQm91bmRzKTtcbn1cbiJdfQ==