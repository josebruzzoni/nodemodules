import { AfterViewInit, EventEmitter, OnInit, DoCheck, ElementRef, OnDestroy } from "@angular/core";
import { DayPilot } from "./daypilot-core";
import * as ɵngcc0 from '@angular/core';
export declare class DayPilotSchedulerComponent implements OnInit, OnDestroy, AfterViewInit, DoCheck {
    private _requestUpdate;
    private _requestViewChange;
    private _eventDiff;
    private _visibleRange;
    private _hashOptions;
    private _eventsSet;
    private _events;
    private _id;
    control: DayPilot.Scheduler;
    viewChange: EventEmitter<DayPilot.Date>;
    config: any;
    events: DayPilot.EventData[];
    readonly id: string;
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngAfterViewInit(): void;
    ngDoCheck(): void;
    private dispose();
    private updateOptions();
    private updateEvents();
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DayPilotSchedulerComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<DayPilotSchedulerComponent, "daypilot-scheduler", never, { "events": "events"; "config": "config"; }, { "viewChange": "viewChange"; }, never, never>;
}
export declare class DayPilotCalendarComponent implements OnInit, OnDestroy, AfterViewInit, DoCheck {
    private _requestUpdate;
    private _requestViewChange;
    private _hashOptions;
    private _hashEvents;
    private _id;
    control: DayPilot.Calendar;
    viewChange: EventEmitter<DayPilot.Date>;
    events: DayPilot.EventData[];
    config: any;
    readonly id: string;
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngAfterViewInit(): void;
    ngDoCheck(): void;
    private dispose();
    private updateOptions();
    private updateEvents();
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DayPilotCalendarComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<DayPilotCalendarComponent, "daypilot-calendar", never, { "events": "events"; "config": "config"; }, { "viewChange": "viewChange"; }, never, never>;
}
export declare class DayPilotGanttComponent implements OnInit, OnDestroy, AfterViewInit, DoCheck {
    private _requestUpdate;
    private _hashOptions;
    private _id;
    control: DayPilot.Gantt;
    config: any;
    readonly id: string;
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngAfterViewInit(): void;
    ngDoCheck(): void;
    private dispose();
    private updateOptions();
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DayPilotGanttComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<DayPilotGanttComponent, "daypilot-gantt", never, { "config": "config"; }, {}, never, never>;
}
export declare class DayPilotMonthComponent implements OnInit, OnDestroy, AfterViewInit, DoCheck {
    private _requestUpdate;
    private _hashOptions;
    private _hashEvents;
    private _id;
    control: DayPilot.Month;
    events: DayPilot.EventData[];
    config: any;
    readonly id: string;
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngAfterViewInit(): void;
    ngDoCheck(): void;
    private dispose();
    private updateOptions();
    private updateEvents();
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DayPilotMonthComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<DayPilotMonthComponent, "daypilot-month", never, { "events": "events"; "config": "config"; }, {}, never, never>;
}
export declare class DayPilotKanbanComponent implements OnInit, OnDestroy, AfterViewInit, DoCheck {
    private _requestUpdate;
    private _hashOptions;
    private _id;
    control: DayPilot.Kanban;
    config: any;
    readonly id: string;
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngAfterViewInit(): void;
    ngDoCheck(): void;
    private dispose();
    private updateOptions();
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DayPilotKanbanComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<DayPilotKanbanComponent, "daypilot-kanban", never, { "config": "config"; }, {}, never, never>;
}
export declare class DayPilotNavigatorComponent implements OnInit, OnDestroy, AfterViewInit, DoCheck {
    private _requestUpdate;
    private _hashOptions;
    private _hashDate;
    private _hashEvents;
    private _onTrs;
    date: DayPilot.Date;
    events: DayPilot.EventDataShort[];
    config: any;
    dateChange: EventEmitter<DayPilot.Date>;
    private _id;
    control: DayPilot.Navigator;
    readonly id: string;
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngAfterViewInit(): void;
    ngDoCheck(): void;
    private dispose();
    private updateOptions();
    private updateEvents();
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DayPilotNavigatorComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<DayPilotNavigatorComponent, "daypilot-navigator", never, { "date": "date"; "events": "events"; "config": "config"; }, { "dateChange": "dateChange"; }, never, never>;
}
export declare class DayPilotModalComponent implements OnInit {
    private element;
    autoFocus: boolean;
    close: EventEmitter<any>;
    private _visibility;
    constructor(element: ElementRef);
    readonly visible: boolean;
    ngOnInit(): void;
    show(): void;
    hide(result?: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DayPilotModalComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<DayPilotModalComponent, "daypilot-modal", never, { "autoFocus": "autoFocus"; }, { "close": "close"; }, never, ["*"]>;
}
export declare class DayPilotModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<DayPilotModule, [typeof DayPilotSchedulerComponent, typeof DayPilotCalendarComponent, typeof DayPilotMonthComponent, typeof DayPilotNavigatorComponent, typeof DayPilotGanttComponent, typeof DayPilotKanbanComponent, typeof DayPilotModalComponent], never, [typeof DayPilotSchedulerComponent, typeof DayPilotCalendarComponent, typeof DayPilotMonthComponent, typeof DayPilotNavigatorComponent, typeof DayPilotGanttComponent, typeof DayPilotKanbanComponent, typeof DayPilotModalComponent]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<DayPilotModule>;
}
export { DayPilot };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF5cGlsb3QtYW5ndWxhci5kLnRzIiwic291cmNlcyI6WyJkYXlwaWxvdC1hbmd1bGFyLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQ0E7OztBQUNBO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlclZpZXdJbml0LCBFdmVudEVtaXR0ZXIsIE9uSW5pdCwgRG9DaGVjaywgRWxlbWVudFJlZiwgT25EZXN0cm95IH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0IHsgRGF5UGlsb3QgfSBmcm9tIFwiLi9kYXlwaWxvdC1jb3JlXCI7XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIERheVBpbG90U2NoZWR1bGVyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3ksIEFmdGVyVmlld0luaXQsIERvQ2hlY2sge1xyXG4gICAgcHJpdmF0ZSBfcmVxdWVzdFVwZGF0ZTtcclxuICAgIHByaXZhdGUgX3JlcXVlc3RWaWV3Q2hhbmdlO1xyXG4gICAgcHJpdmF0ZSBfZXZlbnREaWZmO1xyXG4gICAgcHJpdmF0ZSBfdmlzaWJsZVJhbmdlO1xyXG4gICAgcHJpdmF0ZSBfaGFzaE9wdGlvbnM7XHJcbiAgICBwcml2YXRlIF9ldmVudHNTZXQ7XHJcbiAgICBwcml2YXRlIF9ldmVudHM7XHJcbiAgICBwcml2YXRlIF9pZDtcclxuICAgIGNvbnRyb2w6IERheVBpbG90LlNjaGVkdWxlcjtcclxuICAgIHZpZXdDaGFuZ2U6IEV2ZW50RW1pdHRlcjxEYXlQaWxvdC5EYXRlPjtcclxuICAgIGNvbmZpZzogYW55O1xyXG4gICAgZXZlbnRzOiBEYXlQaWxvdC5FdmVudERhdGFbXTtcclxuICAgIHJlYWRvbmx5IGlkOiBzdHJpbmc7XHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xyXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcclxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xyXG4gICAgbmdEb0NoZWNrKCk6IHZvaWQ7XHJcbiAgICBwcml2YXRlIGRpc3Bvc2UoKTtcclxuICAgIHByaXZhdGUgdXBkYXRlT3B0aW9ucygpO1xyXG4gICAgcHJpdmF0ZSB1cGRhdGVFdmVudHMoKTtcclxufVxyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBEYXlQaWxvdENhbGVuZGFyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3ksIEFmdGVyVmlld0luaXQsIERvQ2hlY2sge1xyXG4gICAgcHJpdmF0ZSBfcmVxdWVzdFVwZGF0ZTtcclxuICAgIHByaXZhdGUgX3JlcXVlc3RWaWV3Q2hhbmdlO1xyXG4gICAgcHJpdmF0ZSBfaGFzaE9wdGlvbnM7XHJcbiAgICBwcml2YXRlIF9oYXNoRXZlbnRzO1xyXG4gICAgcHJpdmF0ZSBfaWQ7XHJcbiAgICBjb250cm9sOiBEYXlQaWxvdC5DYWxlbmRhcjtcclxuICAgIHZpZXdDaGFuZ2U6IEV2ZW50RW1pdHRlcjxEYXlQaWxvdC5EYXRlPjtcclxuICAgIGV2ZW50czogRGF5UGlsb3QuRXZlbnREYXRhW107XHJcbiAgICBjb25maWc6IGFueTtcclxuICAgIHJlYWRvbmx5IGlkOiBzdHJpbmc7XHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xyXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcclxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xyXG4gICAgbmdEb0NoZWNrKCk6IHZvaWQ7XHJcbiAgICBwcml2YXRlIGRpc3Bvc2UoKTtcclxuICAgIHByaXZhdGUgdXBkYXRlT3B0aW9ucygpO1xyXG4gICAgcHJpdmF0ZSB1cGRhdGVFdmVudHMoKTtcclxufVxyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBEYXlQaWxvdEdhbnR0Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3ksIEFmdGVyVmlld0luaXQsIERvQ2hlY2sge1xyXG4gICAgcHJpdmF0ZSBfcmVxdWVzdFVwZGF0ZTtcclxuICAgIHByaXZhdGUgX2hhc2hPcHRpb25zO1xyXG4gICAgcHJpdmF0ZSBfaWQ7XHJcbiAgICBjb250cm9sOiBEYXlQaWxvdC5HYW50dDtcclxuICAgIGNvbmZpZzogYW55O1xyXG4gICAgcmVhZG9ubHkgaWQ6IHN0cmluZztcclxuICAgIG5nT25Jbml0KCk6IHZvaWQ7XHJcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xyXG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XHJcbiAgICBuZ0RvQ2hlY2soKTogdm9pZDtcclxuICAgIHByaXZhdGUgZGlzcG9zZSgpO1xyXG4gICAgcHJpdmF0ZSB1cGRhdGVPcHRpb25zKCk7XHJcbn1cclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRGF5UGlsb3RNb250aENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95LCBBZnRlclZpZXdJbml0LCBEb0NoZWNrIHtcclxuICAgIHByaXZhdGUgX3JlcXVlc3RVcGRhdGU7XHJcbiAgICBwcml2YXRlIF9oYXNoT3B0aW9ucztcclxuICAgIHByaXZhdGUgX2hhc2hFdmVudHM7XHJcbiAgICBwcml2YXRlIF9pZDtcclxuICAgIGNvbnRyb2w6IERheVBpbG90Lk1vbnRoO1xyXG4gICAgZXZlbnRzOiBEYXlQaWxvdC5FdmVudERhdGFbXTtcclxuICAgIGNvbmZpZzogYW55O1xyXG4gICAgcmVhZG9ubHkgaWQ6IHN0cmluZztcclxuICAgIG5nT25Jbml0KCk6IHZvaWQ7XHJcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xyXG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XHJcbiAgICBuZ0RvQ2hlY2soKTogdm9pZDtcclxuICAgIHByaXZhdGUgZGlzcG9zZSgpO1xyXG4gICAgcHJpdmF0ZSB1cGRhdGVPcHRpb25zKCk7XHJcbiAgICBwcml2YXRlIHVwZGF0ZUV2ZW50cygpO1xyXG59XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIERheVBpbG90S2FuYmFuQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3ksIEFmdGVyVmlld0luaXQsIERvQ2hlY2sge1xyXG4gICAgcHJpdmF0ZSBfcmVxdWVzdFVwZGF0ZTtcclxuICAgIHByaXZhdGUgX2hhc2hPcHRpb25zO1xyXG4gICAgcHJpdmF0ZSBfaWQ7XHJcbiAgICBjb250cm9sOiBEYXlQaWxvdC5LYW5iYW47XHJcbiAgICBjb25maWc6IGFueTtcclxuICAgIHJlYWRvbmx5IGlkOiBzdHJpbmc7XHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xyXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcclxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xyXG4gICAgbmdEb0NoZWNrKCk6IHZvaWQ7XHJcbiAgICBwcml2YXRlIGRpc3Bvc2UoKTtcclxuICAgIHByaXZhdGUgdXBkYXRlT3B0aW9ucygpO1xyXG59XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIERheVBpbG90TmF2aWdhdG9yQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3ksIEFmdGVyVmlld0luaXQsIERvQ2hlY2sge1xyXG4gICAgcHJpdmF0ZSBfcmVxdWVzdFVwZGF0ZTtcclxuICAgIHByaXZhdGUgX2hhc2hPcHRpb25zO1xyXG4gICAgcHJpdmF0ZSBfaGFzaERhdGU7XHJcbiAgICBwcml2YXRlIF9oYXNoRXZlbnRzO1xyXG4gICAgcHJpdmF0ZSBfb25UcnM7XHJcbiAgICBkYXRlOiBEYXlQaWxvdC5EYXRlO1xyXG4gICAgZXZlbnRzOiBEYXlQaWxvdC5FdmVudERhdGFTaG9ydFtdO1xyXG4gICAgY29uZmlnOiBhbnk7XHJcbiAgICBkYXRlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8RGF5UGlsb3QuRGF0ZT47XHJcbiAgICBwcml2YXRlIF9pZDtcclxuICAgIGNvbnRyb2w6IERheVBpbG90Lk5hdmlnYXRvcjtcclxuICAgIHJlYWRvbmx5IGlkOiBzdHJpbmc7XHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xyXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcclxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xyXG4gICAgbmdEb0NoZWNrKCk6IHZvaWQ7XHJcbiAgICBwcml2YXRlIGRpc3Bvc2UoKTtcclxuICAgIHByaXZhdGUgdXBkYXRlT3B0aW9ucygpO1xyXG4gICAgcHJpdmF0ZSB1cGRhdGVFdmVudHMoKTtcclxufVxyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBEYXlQaWxvdE1vZGFsQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuICAgIHByaXZhdGUgZWxlbWVudDtcclxuICAgIGF1dG9Gb2N1czogYm9vbGVhbjtcclxuICAgIGNsb3NlOiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICAgIHByaXZhdGUgX3Zpc2liaWxpdHk7XHJcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50OiBFbGVtZW50UmVmKTtcclxuICAgIHJlYWRvbmx5IHZpc2libGU6IGJvb2xlYW47XHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xyXG4gICAgc2hvdygpOiB2b2lkO1xyXG4gICAgaGlkZShyZXN1bHQ/OiBhbnkpOiB2b2lkO1xyXG59XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIERheVBpbG90TW9kdWxlIHtcclxufVxyXG5leHBvcnQgeyBEYXlQaWxvdCB9O1xyXG4iXX0=